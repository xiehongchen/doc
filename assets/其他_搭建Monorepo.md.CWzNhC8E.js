import{_ as a,c as e,o as s,a5 as n}from"./chunks/framework.g1bUz4ZK.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"其他/搭建Monorepo.md","filePath":"其他/搭建Monorepo.md","lastUpdated":1717581134000}'),p={name:"其他/搭建Monorepo.md"},o=n(`<p>copy from <a href="https://tech.uupt.com/?p=1185" target="_blank" rel="noreferrer">UU跑腿·技术团队</a></p><h2 id="什么是monorepo-何时需要它" tabindex="-1"><strong>什么是Monorepo? 何时需要它？</strong> <a class="header-anchor" href="#什么是monorepo-何时需要它" aria-label="Permalink to &quot;**什么是Monorepo? 何时需要它？**&quot;">​</a></h2><p><code>Monorepo(**mó nuò ré pō**)</code>是一种软件开发策略，它使用单一的代码库来管理项目中的所有代码，像一些著名的开源库<a href="https://github.com/vuejs/core" target="_blank" rel="noreferrer">Vue</a>、<a href="https://github.com/babel/babel" target="_blank" rel="noreferrer">Babel</a>、<a href="https://github.com/nuxt/nuxt" target="_blank" rel="noreferrer">Nuxt</a>、<a href="https://github.com/facebook/react/" target="_blank" rel="noreferrer">React</a>都在使用这种模式来进行代码管理。</p><p>它是一个代码库中许多不同应用程序和软件包的集合，按最简单的话来说，其实就是把多个项目放在一个<code>Git</code>仓库下进行管理。</p><p>与<code>Monorepo</code>相对应的就是<code>PolyRepo</code>也叫<code>Multirepo</code>, <code>PolyRepo</code>就是将每个项目分散到不同的代码仓库，就是我们平常工作中经常使用的代码管理模式。</p><p><img src="https://tech.uupt.com/wp-content/uploads/2023/03/vs.png" alt="img" loading="lazy"></p><p>那么我们何时需要使用<code>Monorepo</code>呢？</p><p>假如现在我们有这么几个项目，并且采用<code>PolyRepo</code> 的模式去进行代码管理:</p><ul><li>adminApp – 后台管理应用</li><li>h5App – h5移动端应用</li><li>shared-utils – 公共方法，供adminApp以及h5App 进行调用。</li></ul><p>其中<code>shared-utils</code>作为一个<code>npm</code>包，其它项目通过<code>npm install</code>进行安装使用。</p><p>如果我们发现<code>shared-utils</code>中的一个方法有Bug，我们进行修复的时候大致步骤如下：</p><ol><li>在<code>shared-utils</code> 代码仓库中进行修复以及提交。</li><li>更新<code>shared-utils</code>的包版本，发布到<code>npm</code>上</li><li>在<code>adminApp</code>中更新<code>shared-utils</code>包版本，并进行构建发布。</li><li>在<code>h5App</code>中更新<code>shared-utils</code>包版本，并进行构建发布。</li></ol><p>如此几个步骤下来，修复错误所需的时间会比较长，如果实际的业务应用不止两个，那么这个问题完全修复的时间则更加长。</p><p>从以上的例子可以看到，<code>Polyrepo</code>的问题主要有以下几点:</p><ul><li>应用之间的版本管理比较混乱</li><li>构建工具以及相关项目配置不统一，不同项目间的构建工具可能会存在差异，可能会导致在配置CI/CD构建部署的流程中出现问题</li><li>应用之间的代码共享比较困难，虽然可以通过抽离<code>npm</code>包的形式来达到代码共享以及复用，但是对于开发人员来讲，流程有些过于繁琐，一旦出现问题，会大大增加修复问题的时间。</li></ul><p>下面将我们的代码采用<code>Monorepo</code>模式整合在一个代码仓库中：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>├── apps</span></span>
<span class="line"><span>│   ├── adminApp</span></span>
<span class="line"><span>│   │   ├── package.json</span></span>
<span class="line"><span>│   │   └── webpack.config.js</span></span>
<span class="line"><span>│   └── h5App</span></span>
<span class="line"><span>│       ├── package.json</span></span>
<span class="line"><span>│       └── webpack.config.js</span></span>
<span class="line"><span>├── packages</span></span>
<span class="line"><span>│   └── shared-utils</span></span>
<span class="line"><span>│       └── package.json</span></span>
<span class="line"><span>├── package.json</span></span>
<span class="line"><span>└── webpack.config.js</span></span></code></pre></div><p>可以看到<code>apps</code>目录下将存放了<code>adminApp</code>以及<code>h5App</code>应用，<code>packages</code>目录下存放了公共的工具库<code>shared-utils</code>，那么我们再来走一下上边修复问题的流程：</p><ol><li>对<code>shared-utils</code>的代码进行修复</li><li>进行整体项目的构建以及部署，等待部署完成，所有应用的问题即可修复完毕。</li></ol><p>除了流程步骤减少之外，还可以做到以下优化：</p><ul><li>不需要手动更新应用中引入<code>shared-utils</code>的版本，因为它们不依赖于<code>npm</code>中<code>shared-utils</code>版本，而是依赖库此代码库中的版本</li><li>统一进行项目依赖的管理，结合<code>pnpm workspace</code>我们可以在项目根目录统一管理以及安装所有应用的依赖。</li><li>结合<code>CI/CD</code>，可以实现单个项目以及全部项目的构建部署工作。</li></ul><p>综上所述，可以知道<code>Monorepo</code>主要能够解决以下问题：</p><ol><li>代码复用：多个项目可以共享代码库，避免了代码的重复编写和维护。这可以减少开发工作量，提高代码的质量和稳定性。</li><li>依赖管理：Monorepo中的所有项目使用同一份依赖列表，可以避免依赖管理的冲突和版本控制的混乱。同时，依赖的更新和升级也变得更加简单和统一。</li><li>代码重构：Monorepo中的代码可以更加方便地进行重构和重组，因为不同项目之间的代码可以更容易地相互访问和调用。</li><li>统一构建和部署：Monorepo中的所有项目使用同一套构建和部署流程，可以避免流程的重复和冲突。同时，这也可以更加方便地进行持续集成和持续部署。</li></ol><p>所以当你的开发的项目遇到了上述问题，那么你可以考虑将你的项目改造为<code>Monorepo</code>。</p><h2 id="什么是pnpm-它有哪些优势" tabindex="-1"><strong>什么是pnpm? 它有哪些优势？</strong> <a class="header-anchor" href="#什么是pnpm-它有哪些优势" aria-label="Permalink to &quot;**什么是pnpm? 它有哪些优势？**&quot;">​</a></h2><p><a href="https://pnpm.io/zh/motivation" target="_blank" rel="noreferrer">pnpm</a>跟<code>npm</code>、<code>yarn</code>一样，都是用于管理Node包依赖的管理器。</p><p>根据官网的描述，它的主要优点如下:</p><ul><li>能够大大节省磁盘空间，不同于<code>npm</code>，同一个依赖被不同的项目使用时，都会被重复安装一次，而<code>pnpm</code>则会将依赖按版本进行存储，如果在存储中心能够找到此依赖，则会将包里的文件硬链接到存储中心中对应依赖的位置，不会重复安装。</li><li>大大提高了安装速度，之前安装过的依赖都会直接从存储中心中获取并链接到项目的<code>node_modules</code>中。</li><li>避免出现幽灵依赖的问题，默认情况下，pnpm 使用符号链接将项目的直接依赖项添加到模块目录的根目录中，而对应的在项目中，我们只可以访问<code>package.json</code>文件中声明过的依赖项，无法访问未声明的的<code>依赖项</code>，想了解更多可以点击查看<a href="https://pnpm.io/zh/blog/2020/05/27/flat-node-modules-is-not-the-only-way" target="_blank" rel="noreferrer">平铺的结构不是 node_modules 的唯一实现方式 | pnpm</a></li></ul><p>下图是与其它包管理器的比较:</p><p><img src="https://tech.uupt.com/wp-content/uploads/2023/03/image-20.png" alt="img" loading="lazy"></p><p>由此来看，<code>pnpm</code>的优势很大，而且像<a href="https://github.com/vuejs/core" target="_blank" rel="noreferrer">Vue</a>、<a href="https://github.com/NervJS/taro" target="_blank" rel="noreferrer">Taro</a>等主流的开源库也使用<code>pnpm</code>来作为项目包管理器。这也是我们团队目前统一使用<code>pnpm</code>作为包管理器的原因。</p><h3 id="pnpm-workspace" tabindex="-1"><strong>pnpm Workspace</strong> <a class="header-anchor" href="#pnpm-workspace" aria-label="Permalink to &quot;**pnpm Workspace**&quot;">​</a></h3><h4 id="如何启用" tabindex="-1"><strong>如何启用</strong> <a class="header-anchor" href="#如何启用" aria-label="Permalink to &quot;**如何启用**&quot;">​</a></h4><p>一个 workspace 的根目录下必须有 <a href="https://pnpm.io/zh/pnpm-workspace_yaml" target="_blank" rel="noreferrer">pnpm-workspace.yaml</a> 文件， 也可能会有 <a href="https://pnpm.io/zh/npmrc" target="_blank" rel="noreferrer">.npmrc</a> 文件。</p><p><code>pnpm-workspace.yaml</code>示例:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>packages:</span></span>
<span class="line"><span>  - &quot;packages/*&quot;</span></span></code></pre></div><p>这就代表<code>packages</code>文件夹为当前的工作空间。</p><h4 id="workspace协议" tabindex="-1"><strong>WorkSpace协议</strong> <a class="header-anchor" href="#workspace协议" aria-label="Permalink to &quot;**WorkSpace协议**&quot;">​</a></h4><p><a href="https://pnpm.io/zh/workspaces#workspace-%E5%8D%8F%E8%AE%AE-workspace" target="_blank" rel="noreferrer">WorkSpace协议</a>是<code>pnpm</code>支持<code>Monorepo</code>的一个重要功能，它可以指定工作空间内的包依赖关系。</p><p>比如，有这样一个目录</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>├── packages</span></span>
<span class="line"><span>│   ├── packageA</span></span>
<span class="line"><span>│   │   └── package.json</span></span>
<span class="line"><span>│   └── packageB</span></span>
<span class="line"><span>│       └── package.json</span></span>
<span class="line"><span>├── package.json</span></span>
<span class="line"><span>└── pnpm-workspace.yaml</span></span></code></pre></div><p>在这个项目中, <code>A</code>包依赖了<code>B</code>包，那么我们可以通过别名进行应用，</p><p>比如，在<code>A</code>包的<code>package.json</code>文件中声明:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;name&quot;: &quot;package-a&quot;,</span></span>
<span class="line"><span>  &quot;private&quot;: true,</span></span>
<span class="line"><span>  &quot;version&quot;: &quot;0.0.1&quot;,</span></span>
<span class="line"><span>  &quot;dependencies&quot;: {</span></span>
<span class="line"><span>    &quot;package-b&quot;: &quot;workspace:^&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>这样在根目录进行<code>pnpm install</code>时，<code>pnpm</code>会自动帮我们处理包之间的引用关系。</p><p>看到这，你可能会有些疑问，那我将<code>A</code>包发布到npm上时，还存在这个<code>workspace</code>的协议不就有问题了吗？这一点<code>pnpm</code>官方也替我们处理了，通过<code>pnpm publish</code>时，<code>pnpm</code>会将这些<code>workspace</code>协议自动转换为当前包的正式版本号，具体可以查看<a href="https://pnpm.io/zh/workspaces#%E5%8F%91%E5%B8%83-workspace-%E5%8C%85" target="_blank" rel="noreferrer">https://pnpm.io/zh/workspaces#%E5%8F%91%E5%B8%83-workspace-%E5%8C%85</a>，官方的例子更加清晰易懂。</p><h2 id="什么是turborepo" tabindex="-1"><strong>什么是Turborepo？</strong> <a class="header-anchor" href="#什么是turborepo" aria-label="Permalink to &quot;**什么是Turborepo？**&quot;">​</a></h2><p><a href="https://turbo.build/repo/docs" target="_blank" rel="noreferrer">Turborepo</a> 是一个高性能的 JavaScript 和 TypeScript 项目构建系统，采用<code>Go</code>语言实现，所以在语言层面上就具有一定的性能优势，可以大大提高<code>monorepo</code>项目的构建速度。</p><h3 id="优势" tabindex="-1"><strong>优势</strong> <a class="header-anchor" href="#优势" aria-label="Permalink to &quot;**优势**&quot;">​</a></h3><ul><li>增量构建： Turborepo 会记住你之前构建的结果并跳过已经计算过的内容。</li><li>感知内容hash: Turborepo 通过文件的内容，而不是时间戳来确定需要构建的内容。</li><li>并行处理: 不浪费任何闲置 cpu 性能，以每个核心最大的并行度来执行构建。</li><li>远程缓存 : 与团队成员、CI/CD 共享远程构建缓存，以实现更快的构建。</li><li>零运行时开销: Turborepo 不会影响您的运行时代码或 sourcemap。</li><li>任务管道: 定义任务之间的关系，然后让 Turborepo 优化构建内容和时间。</li><li>渐进式设计：可以在几分钟内快速集成到项目中</li></ul><h3 id="如何创建一个turborepo项目" tabindex="-1"><strong>如何创建一个Turborepo项目</strong> <a class="header-anchor" href="#如何创建一个turborepo项目" aria-label="Permalink to &quot;**如何创建一个Turborepo项目**&quot;">​</a></h3><p>运行以下命令，然后根据提示进行选择创建即可</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pnpm dlx create-turbo@latest</span></span>
<span class="line"><span>or </span></span>
<span class="line"><span>npx create-turbo@latest</span></span></code></pre></div><h3 id="如何集成到现有项目中" tabindex="-1"><strong>如何集成到现有项目中</strong> <a class="header-anchor" href="#如何集成到现有项目中" aria-label="Permalink to &quot;**如何集成到现有项目中**&quot;">​</a></h3><p>这里我们以<code>npm create vite@latest</code>创建的项目为例子。</p><ol><li>在项目根目录下，安装<code>turbo</code>依赖</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pnpm i turbo --save-dev</span></span></code></pre></div><ol><li>在根目录下添加<code>turbo.json</code>配置文件，向<code>pipeline</code>字段中配置<code>npm scripts</code>中的命令，比如<code>build</code>命令</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;pipeline&quot;: {</span></span>
<span class="line"><span>    &quot;build&quot;: {</span></span>
<span class="line"><span>      &quot;outputs&quot;: [&quot;dist/**&quot;]</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>配置完成后，我们就可以使用<code>turbo</code>来执行我们项目的<code>build</code>命令。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pnpm turbo build</span></span></code></pre></div><p>第一次构建时：</p><p><img src="https://tech.uupt.com/wp-content/uploads/2023/03/image-1-1.png" alt="img" loading="lazy"></p><p>第二次构建时：</p><p><img src="https://tech.uupt.com/wp-content/uploads/2023/03/image-2-1.png" alt="img" loading="lazy"></p><p>可以看到，在第二次构建时，<code>turbo</code>直接使用了之前构建过的缓存，构建时间由之前的<code>3.765</code>秒缩减到了<code>284</code>毫秒</p><h3 id="turbo-json配置项说明" tabindex="-1"><strong>turbo.json配置项说明</strong> <a class="header-anchor" href="#turbo-json配置项说明" aria-label="Permalink to &quot;**turbo.json配置项说明**&quot;">​</a></h3><p>示例文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;$schema&quot;: &quot;https://turborepo.org/schema.json&quot;,</span></span>
<span class="line"><span>  // 管道配置 </span></span>
<span class="line"><span>  &quot;pipeline&quot;: {</span></span>
<span class="line"><span>    &quot;dev&quot;: {</span></span>
<span class="line"><span>      &quot;persistent&quot;: true</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;build&quot;: {</span></span>
<span class="line"><span>      &quot;dependsOn&quot;: [&quot;^build&quot;],</span></span>
<span class="line"><span>      &quot;env&quot;: [&quot;SOMETHING_ELSE&quot;], // value will impact the hashes of all build tasks</span></span>
<span class="line"><span>      &quot;outputs&quot;: [&quot;dist/**&quot;, &quot;.next/**&quot;]</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;test&quot;: {</span></span>
<span class="line"><span>      &quot;outputs&quot;: [&quot;coverage/**&quot;],</span></span>
<span class="line"><span>      &quot;dependsOn&quot;: [&quot;build&quot;],</span></span>
<span class="line"><span>      &quot;inputs&quot;: [&quot;src/**/*.tsx&quot;, &quot;src/**/*.ts&quot;, &quot;test/**/*.ts&quot;],</span></span>
<span class="line"><span>      &quot;outputMode&quot;: &quot;full&quot;</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;globalEnv&quot;: [</span></span>
<span class="line"><span>    &quot;GITHUB_TOKEN&quot; // value will impact the hashes of all tasks</span></span>
<span class="line"><span>  ],</span></span>
<span class="line"><span>  &quot;globalDependencies&quot;:[</span></span>
<span class="line"><span>    &quot;.env&quot;, // contents will impact hashes of all tasks</span></span>
<span class="line"><span>    &quot;tsconfig.json&quot; // contents will impact hashes of all tasks</span></span>
<span class="line"><span>  ]</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="schema" tabindex="-1"><strong>$schema</strong> <a class="header-anchor" href="#schema" aria-label="Permalink to &quot;**$schema**&quot;">​</a></h4><p>指定配置文件的JSON Schema，它可以帮助你在编辑器中自动补全和校验配置项，为固定值<a href="https://turborepo.org/schema.json" target="_blank" rel="noreferrer">https://turborepo.org/schema.json</a></p><h4 id="pipeline" tabindex="-1"><strong>pipeline</strong> <a class="header-anchor" href="#pipeline" aria-label="Permalink to &quot;**pipeline**&quot;">​</a></h4><p>pipeline 字段是一个对象，用来表示你的项目的任务依赖图。</p><p><code>Turbo</code> 会根据这些约定来合理地调度、执行和缓存任务的输出。pipeline 对象中的每个键都是一个可以被 <code>Turbo run</code> 执行的任务的名称</p><p>如果<code>Turbo</code> 发现一个工作空间有一个 <code>package.json scripts</code> 对象中有一个匹配的键，它会在执行时将 pipeline 任务配置应用到那个 npm 脚本上。这样你就可以使用 pipeline 来设置你整个 <code>Turborepo</code> 的约定。</p><h5 id="dependson" tabindex="-1"><strong>DEPENDSON</strong> <a class="header-anchor" href="#dependson" aria-label="Permalink to &quot;**DEPENDSON**&quot;">​</a></h5><p>该字段是一个字符串数组，表示当前任务所依赖的其它任务。</p><p>分为两种依赖，前缀带有<code>^</code>为拓扑依赖，不带则为普通依赖，具体差别如下：</p><ul><li>拓扑依赖: 当前任务执行之前必须要等待它所依赖的包中对应的命令运行完成后才能开始运行。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;pipeline&quot;: {</span></span>
<span class="line"><span>    &quot;build&quot;: {</span></span>
<span class="line"><span>      &quot;dependsOn&quot;: [&quot;^build&quot;]</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>假如有一个名为<code>packageA</code>的包，它的<code>package.json</code>文件中<code>devDependencies</code>或者<code>dependencies</code>字段含有名为<code>packageB</code>的包，那么执行通过<code>pnpm turbo run build</code>运行<code>packageA</code>的build命令之前，会先等待<code>packageB</code>包的build命令运行完成后才会继续运行</p><ul><li>普通依赖： 需要等待自身包工作空间的命令运行完成后才开始运行</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;pipeline&quot;: {</span></span>
<span class="line"><span>    &quot;build&quot;: {</span></span>
<span class="line"><span>      &quot;dependsOn&quot;: [&quot;test&quot;]</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>按以上配置，假如通过<code>pnpm turbo run build</code>运行<code>packageA</code>的build命令之前，会先去执行<code>packageA</code>的test命令，test命令执行完毕后，才会去执行build命令。</p><h5 id="env" tabindex="-1"><strong>ENV</strong> <a class="header-anchor" href="#env" aria-label="Permalink to &quot;**ENV**&quot;">​</a></h5><p>任务所依赖的环境变量，与globalEnv作用类似</p><h5 id="outputs" tabindex="-1"><strong>OUTPUTS</strong> <a class="header-anchor" href="#outputs" aria-label="Permalink to &quot;**OUTPUTS**&quot;">​</a></h5><p>构建产物输出的目录，当开启缓存时，<code>Turbo</code>会将对应目录的产物进行缓存</p><h5 id="cache" tabindex="-1"><strong>CACHE</strong> <a class="header-anchor" href="#cache" aria-label="Permalink to &quot;**CACHE**&quot;">​</a></h5><p>布尔类型，是否开启缓存，默认为<code>true</code></p><h5 id="inputs" tabindex="-1"><strong>INPUTS</strong> <a class="header-anchor" href="#inputs" aria-label="Permalink to &quot;**INPUTS**&quot;">​</a></h5><p>默认为<code>[]</code>，用于指定哪些文件的变化会触发任务的重新执行。</p><h5 id="outputmode" tabindex="-1"><strong>OUTPUTMODE</strong> <a class="header-anchor" href="#outputmode" aria-label="Permalink to &quot;**OUTPUTMODE**&quot;">​</a></h5><p>设置输出日志记录的类型</p><ul><li>full：默认设置，显示所有输出</li><li>hash-only: 只显示任务的hash值</li><li>new-only: 只显示没有命中缓存的任务输出</li><li>errors-only: 只显示失败的任务输出</li><li>none: 隐藏所有任务输出</li></ul><h5 id="persistent" tabindex="-1"><strong>PERSISTENT</strong> <a class="header-anchor" href="#persistent" aria-label="Permalink to &quot;**PERSISTENT**&quot;">​</a></h5><p>如果当前任务是一个长时间运行的进程，比如<code>dev</code>命令，则可以设为<code>true</code></p><h4 id="globalenv" tabindex="-1"><strong>globalEnv</strong> <a class="header-anchor" href="#globalenv" aria-label="Permalink to &quot;**globalEnv**&quot;">​</a></h4><p>globalEnv 是一个字符串数组，用来指定一些环境变量作为全局的哈希依赖。这些环境变量的内容会被包含在全局的哈希算法中，影响所有任务的哈希值。例如，你可以在 globalEnv 中指定 GITHUB_TOKEN，这样当 GITHUB_TOKEN 的值发生变化时，所有任务的缓存都会失效。</p><p>globalEnv 的值是从运行 turbo 命令的环境中获取的，你可以在终端中设置或者使用 .env 文件来管理。</p><h4 id="globaldependencies" tabindex="-1"><strong>globalDependencies</strong> <a class="header-anchor" href="#globaldependencies" aria-label="Permalink to &quot;**globalDependencies**&quot;">​</a></h4><p>globalDependencies 是一个字符串数组，用来指定一些文件作为全局的哈希依赖。这些文件的内容会被包含在全局的哈希算法中，影响所有任务的哈希值，例如配置<code>tsconfig.json</code>、<code>jest.config.js</code>，当这些文件内容有变化时，所有构建缓存将会失效</p><h3 id="与lerna相比" tabindex="-1"><strong>与lerna相比</strong> <a class="header-anchor" href="#与lerna相比" aria-label="Permalink to &quot;**与lerna相比**&quot;">​</a></h3><p>在<code>Turborepo</code>出现之前，<a href="https://lerna.js.org/docs/introduction" target="_blank" rel="noreferrer">lerna</a>是最常用的<code>monorepo</code>管理工具。<code>lerna</code>同样能够支持工作空间内包任务的执行，但它在运行时没有<code>Turborepo</code>的缓存以及任务调度机制，在构建速度上，相对于<code>Turborepo</code>还是有一定差距。</p><p>但是, <code>lerna</code>提供了npm包的发布以及版本管理相关机制以及<a href="https://github.com/lerna/lerna/tree/main/libs/commands/publish#readme" target="_blank" rel="noreferrer">命令</a>，而<code>Turborepo</code>并没有实现这方面的功能，所以我们可以将两者结合使用，<code>Turborepo</code>用于进行管理工作空间内任务命令的执行，<code>lerna</code>来进行<code>npm</code>包的发布以及版本管理。</p><h2 id="changesets" tabindex="-1"><strong>Changesets</strong> <a class="header-anchor" href="#changesets" aria-label="Permalink to &quot;**Changesets**&quot;">​</a></h2><p><a href="https://github.com/changesets/changesets/tree/main#readme" target="_blank" rel="noreferrer">Changesets</a> 是<code>pnpm</code>官方推荐的一个管理版本以及变更日志的工具，专注于多包管理。</p><h3 id="如何配置" tabindex="-1"><strong>如何配置</strong> <a class="header-anchor" href="#如何配置" aria-label="Permalink to &quot;**如何配置**&quot;">​</a></h3><ol><li>安装依赖，并进行初始化，安装之前确保你声明了<a href="https://pnpm.io/zh/7.x/pnpm-workspace_yaml" target="_blank" rel="noreferrer">pnpm-workspace.yaml</a>配置文件，证明启用了<code>pnpm workspace</code></li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pnpm add -Dw @changesets/cli</span></span>
<span class="line"><span></span></span>
<span class="line"><span>pnpm changest init</span></span></code></pre></div><p>运行完毕后，会在<code>.changeset</code>目录下新增<code>config.json</code>配置文件，如下:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;$schema&quot;: &quot;https://unpkg.com/@changesets/config@2.3.0/schema.json&quot;,</span></span>
<span class="line"><span>  &quot;changelog&quot;: &quot;@changesets/cli/changelog&quot;,</span></span>
<span class="line"><span>  &quot;commit&quot;: false,</span></span>
<span class="line"><span>  &quot;fixed&quot;: [],</span></span>
<span class="line"><span>  &quot;linked&quot;: [],</span></span>
<span class="line"><span>  &quot;access&quot;: &quot;restricted&quot;,</span></span>
<span class="line"><span>  &quot;baseBranch&quot;: &quot;main&quot;,</span></span>
<span class="line"><span>  &quot;updateInternalDependencies&quot;: &quot;patch&quot;,</span></span>
<span class="line"><span>  &quot;ignore&quot;: []</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="配置字段说明" tabindex="-1"><strong>配置字段说明</strong> <a class="header-anchor" href="#配置字段说明" aria-label="Permalink to &quot;**配置字段说明**&quot;">​</a></h4><ul><li><strong>commit</strong>：类型为布尔值，默认值为false。当将此字段配置为true时，在执行change和bump命令时，将自动执行提交代码操作。</li><li><strong>access</strong>：类型为restricted | public，默认值为restricted。用于配置当前包的发布形式，如果配置为restricted，则作为私有包发布，如果为public，则发布公共范围包。</li><li><strong>baseBranch</strong>：类型为字符串，默认值为main。仓库主分支。该配置用于计算当前分支的变更包并进行分类。</li><li><strong>ignore</strong>：类型为字符串数组，默认值为空数组。用于声明执行bump命令时忽略的包，与bump命令的–ignore参数用法一致，注意两者不能同时使用。</li><li><strong>fixed</strong>：类型为字符串数组数组，默认值为空数组。用于在monorepo中对包进行分组，相同分组中的包版本号将进行绑定，每次执行bump命令时，同一分组中的包只要有一个升级版本号，其他会一起升级。支持使用正则匹配包名称。</li><li><strong>linked</strong>：类型为字符串数组数组，默认值为空数组。与fixed类似，也是对monorepo中对包进行分组，但是每次执行bump命令时，只有和changeset声明的变更相关的包才会升级版本号，同一分组的变更包的版本号将保持一致。支持使用正则匹配包名称。</li><li><strong>updateInternalDependencies</strong>：类型为patch | minor，默认值为patch。用于声明更新内部依赖的版本号规则。当执行bump命令升级版本号时，默认会自动更新仓库中使用该包的依赖声明。</li><li><strong>changelog</strong>：类型为布尔值 | 字符串 | [字符串, unknow]，默认值为@changesets/cli/changelog。生成Changelog规则。</li></ul><p>一般来说，你不需要对这些配置进行更改。</p><h3 id="如何进行版本变更以及发布" tabindex="-1">如何进行版本变更以及发布 <a class="header-anchor" href="#如何进行版本变更以及发布" aria-label="Permalink to &quot;如何进行版本变更以及发布&quot;">​</a></h3><p>当项目下的某个包有变动时，可以按照以下步骤进行版本变更以及发布</p><ol><li>运行<code>pnpm changest</code>，将会在命令终端将你当前工作空间所有的包列出来，手动选取需要发布的包，选取版本以及填写变更信息。</li><li>运行 <code>pnpm changeset version</code>。 这将提高先前使用 pnpm changeset （以及它们的任何依赖项）的版本，并更新变更日志文件。</li><li>运行 <code>pnpm install</code>。 这将更新工作空间内的锁文件并重新构建包。</li><li>Git提交更改。</li><li>运行 <code>pnpm publish -r</code>。 此命令将发布所有包含被更新版本且尚未出现在包注册源中的包。</li></ol><h2 id="项目实践" tabindex="-1"><strong>项目实践</strong> <a class="header-anchor" href="#项目实践" aria-label="Permalink to &quot;**项目实践**&quot;">​</a></h2><p>上面已经将所涉及到的工具以及基本用法都介绍完了，那么接下来我们将它们结合起来从0到1搭建一个<code>Monorepo</code>项目。</p><h3 id="搭建项目结构" tabindex="-1"><strong>搭建项目结构</strong> <a class="header-anchor" href="#搭建项目结构" aria-label="Permalink to &quot;**搭建项目结构**&quot;">​</a></h3><p>首先使用上边所讲到的创建<code>Turborepo</code>项目的命令</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pnpm dlx create-turbo@latest</span></span></code></pre></div><p><img src="https://tech.uupt.com/wp-content/uploads/2023/03/image-3-1-1024x713.png" alt="img" loading="lazy"></p><p>之后我们会得到这样一个目录:</p><p><img src="https://tech.uupt.com/wp-content/uploads/2023/03/image-4-1.png" alt="img" loading="lazy"></p><p>其中 <code>turbo.json</code>以及<code>pnpm-workspace.yaml</code>文件已经自动帮你创建好了，无需手动配置</p><p><code>apps</code>文件夹视情况可以删除，如果你搭建的项目偏向于项目应用的开发，那么可以保留，并将你的应用代码放置在此文件夹下。</p><p><code>packages</code>文件下偏向于存放公共类库、组件库之类的文件。</p><h3 id="接入changesets" tabindex="-1"><strong>接入Changesets</strong> <a class="header-anchor" href="#接入changesets" aria-label="Permalink to &quot;**接入Changesets**&quot;">​</a></h3><p>如果你搭建的项目偏向于类库、组件库管理，那么就需要接入<code>Changesets</code>来进行包版本的发布以及管理了。</p><p>按照上方的命令进行依赖的安装以及配置文件的创建</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pnpm add -Dw @changesets/cli</span></span>
<span class="line"><span></span></span>
<span class="line"><span>pnpm changest init</span></span></code></pre></div><p>配置完毕后，让我们修改一下<code>packages/ui</code>中的代码，将<code>Button</code>组件的<code>Boop</code>文案修改一下</p><p><img src="https://tech.uupt.com/wp-content/uploads/2023/03/image-5-1-1024x291.png" alt="img" loading="lazy"></p><p>然后运行<code>pnpm changeset</code>命令，选择你要发布的npm包</p><p><img src="https://tech.uupt.com/wp-content/uploads/2023/03/image-6-1.png" alt="img" loading="lazy"></p><p>这里我们敲空格选中<code>ui</code>，点击回车，继续下一步，此时会让我们选择要变更的版本号，这里我们选择<code>patch</code>,同样也是空格键进行选择，选择完版本后会让我们填写变动信息，用于后续<code>CHANGELOG.md</code>文件的生成</p><p><img src="https://tech.uupt.com/wp-content/uploads/2023/03/image-7-1.png" alt="img" loading="lazy"></p><p>继续回车，进行下一步</p><p>运行<code>pnpm changeset version</code>，生成对应的<code>CHANGELOG.md</code>文件，同时版本号也变为了<code>0.0.1</code></p><p><img src="https://tech.uupt.com/wp-content/uploads/2023/03/image-8-1.png" alt="img" loading="lazy"></p><p><img src="https://tech.uupt.com/wp-content/uploads/2023/03/image-9-1.png" alt="img" loading="lazy"></p><p>最后将我们这些代码变动进行<code>commit</code>提交，然后运行<code>pnpm publish -r</code>命令，即可发布对应的npm包。</p><h3 id="文档能力的增强" tabindex="-1"><strong>文档能力的增强</strong> <a class="header-anchor" href="#文档能力的增强" aria-label="Permalink to &quot;**文档能力的增强**&quot;">​</a></h3><p>如果你想为你的<code>Monorepo</code>项目增加文档预览的能力，那么推荐你接入以下的文档工具:</p><ul><li><a href="https://d.umijs.org/guide" target="_blank" rel="noreferrer">dumi 为组件开发场景而生的静态站点框架</a></li><li><a href="https://github.com/dewfall123/ruabick" target="_blank" rel="noreferrer">ruabick 类似dumi的静态站点框架，基于VitePress</a></li></ul><h2 id="总结" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;**总结**&quot;">​</a></h2><p><code>Monorepo</code>能够解决项目中代码复用、版本管理混乱、规范不统一的问题，不少知名的开源库也在使用它进行项目管理。</p><p>不过<code>Monorepo</code>也不是银弹，它也会带来一些问题，比如后期项目过大、无法针对子目录做权限管理。</p><p>所以我们要结合实际的业务需求来进行代码仓库模式的选择，比如开发内部工具库、组件库这种场景就非常适合使用<code>Monorepo</code>来进行代码管理；而多个项目应用之间的代码复用也有许多方案, 比如 利用webpack的<a href="https://webpack.docschina.org/concepts/module-federation/" target="_blank" rel="noreferrer">模块联邦</a>功能、抽离<code>npm</code>包进行引用、使用<code>git submodule</code>等功能。</p><p>总之，每种方案都有利有弊，我们要做的就是不断去思考并调研新技术，选出最符合我们业务场景的方案。</p>`,152),t=[o];function l(c,i,r,d,u,h){return s(),e("div",null,t)}const m=a(p,[["render",l]]);export{b as __pageData,m as default};
