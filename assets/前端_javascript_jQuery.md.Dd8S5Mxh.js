import{_ as s,c as a,o as i,a5 as e}from"./chunks/framework.B7o55Ran.js";const g=JSON.parse('{"title":"jQuery","description":"","frontmatter":{},"headers":[],"relativePath":"前端/javascript/jQuery.md","filePath":"前端/javascript/jQuery.md","lastUpdated":1718696497000}'),t={name:"前端/javascript/jQuery.md"},n=e(`<h1 id="jquery" tabindex="-1">jQuery <a class="header-anchor" href="#jquery" aria-label="Permalink to &quot;jQuery&quot;">​</a></h1><h2 id="_1、概述" tabindex="-1">1、概述 <a class="header-anchor" href="#_1、概述" aria-label="Permalink to &quot;1、概述&quot;">​</a></h2><h3 id="_1、javascript库" tabindex="-1">1、JavaScript库 <a class="header-anchor" href="#_1、javascript库" aria-label="Permalink to &quot;1、JavaScript库&quot;">​</a></h3><blockquote><p>JavaScript库：即library，是一个封装好的特定的集合（方法和函数）。从封装一大堆函数的角度理解，就是在这个库中，封装了很多预先定义好的函数在里面，比如动画animate、hide、show，比如获取元素等</p></blockquote><ul><li>简单理解：就是一个js文件，里面对我们原生js代码进行了封装，存放到里面，这样我们可以快速高效的使用这些封装好的功能了。</li></ul><p>常见JavaScript库</p><blockquote><p>jQuery、Prototype、YUI、Dojo、Ext JS、移动端的zepto</p></blockquote><h3 id="_2、jquery概念" tabindex="-1">2、jQuery概念 <a class="header-anchor" href="#_2、jquery概念" aria-label="Permalink to &quot;2、jQuery概念&quot;">​</a></h3><ul><li>jQuery是一个快速、简洁的JavaScript库，其宗旨是write less，Do More 即提倡写更少的代码，做更多的事情</li></ul><blockquote><p>j就是JavaScript，Query查询；意思 就是查询js，把js中的DOM操作做了封装，我们可以快速的查询使用里面的功能</p><p>jQuery封装了JavaScript常用的功能代码，优化了DOM操作、事件处理、动画设计和Ajax交互</p><p>学习jQuery本质：学习调用这些函数（方法）</p></blockquote><p><strong>优点：</strong></p><h2 id="_2、jquery使用" tabindex="-1">2、jQuery使用 <a class="header-anchor" href="#_2、jquery使用" aria-label="Permalink to &quot;2、jQuery使用&quot;">​</a></h2><p>引入</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jquery-1.10.2.min.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong>语法</strong></p><p>jQuery 语法是通过选取 HTML 元素，并对选取的元素执行某些操作。</p><p>基础语法： <strong>$(selector).action()</strong></p><ul><li>美元符号定义 jQuery，一般用$，也可以用jQuery</li><li>选择符（selector）&quot;查询&quot;和&quot;查找&quot; HTML 元素</li><li>jQuery 的 action() 执行对元素的操作</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 隐藏当前元素</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;p&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 隐藏所有 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 元素</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;p.test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 隐藏所有 class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 的 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 元素</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 隐藏 id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 的元素</span></span></code></pre></div><p>为了防止文档在完全加载（就绪）之前运行 jQuery 代码，即在 DOM 加载完成后才可以对 DOM 进行操作。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$(document).ready(function(){</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>   // 开始写 jQuery 代码...</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>});</span></span>
<span class="line"><span>或</span></span>
<span class="line"><span>$(function(){</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>   // 开始写 jQuery 代码...</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>});</span></span></code></pre></div><ul><li>等着DOM结构渲染完毕即可执行内部代码，不必等到所有外部资源加载完成，jQuery帮我们完成了封装</li><li>相当于原生js中的DOMContenLoaded</li><li>不同于原生js中的load事件是等页面文档、外部的js文件、css文件、图片加载完毕才执行内部代码</li></ul><h3 id="jquery对象和dom对象" tabindex="-1">jQuery对象和DOM对象 <a class="header-anchor" href="#jquery对象和dom对象" aria-label="Permalink to &quot;jQuery对象和DOM对象&quot;">​</a></h3><ul><li>用原生js获取过来的对象就是DOM对象</li><li>jQuery方法获取过来的对象就是jQuery对象</li><li>jQUery对象本质是：利用$对DOM对象包装后产生的对象（伪数组形式存储）</li><li>jQuery对象不能使用<strong>原生js的属性和方法</strong></li></ul><h3 id="相互转换" tabindex="-1"><strong>相互转换</strong> <a class="header-anchor" href="#相互转换" aria-label="Permalink to &quot;**相互转换**&quot;">​</a></h3><h4 id="_1、dom对象转换为jquery对象" tabindex="-1">1、DOM对象转换为jQuery对象 <a class="header-anchor" href="#_1、dom对象转换为jquery对象" aria-label="Permalink to &quot;1、DOM对象转换为jQuery对象&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$(DOM对象)</span></span>
<span class="line"><span>$(&#39;div&#39;)</span></span></code></pre></div><h4 id="_2、jquery对象转换为dom对象" tabindex="-1">2、jQuery对象转换为DOM对象 <a class="header-anchor" href="#_2、jquery对象转换为dom对象" aria-label="Permalink to &quot;2、jQuery对象转换为DOM对象&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$(DOM对象)[index]	//index是索引号</span></span>
<span class="line"><span>$(DOM对象).get(index)	//index是索引号</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$(&#39;div&#39;)[0]</span></span></code></pre></div><h2 id="_3、jquery常用api" tabindex="-1">3、jQuery常用API <a class="header-anchor" href="#_3、jquery常用api" aria-label="Permalink to &quot;3、jQuery常用API&quot;">​</a></h2><h3 id="_1、jquery选择器" tabindex="-1">1、jQuery选择器 <a class="header-anchor" href="#_1、jquery选择器" aria-label="Permalink to &quot;1、jQuery选择器&quot;">​</a></h3><h4 id="_1、基础选择器" tabindex="-1">1、基础选择器 <a class="header-anchor" href="#_1、基础选择器" aria-label="Permalink to &quot;1、基础选择器&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$(&quot;选择器&quot;)	//里面选择器直接写css选择器即可，但是要加引号</span></span></code></pre></div><h4 id="_2、jquery层级选择器" tabindex="-1">2、jQuery层级选择器 <a class="header-anchor" href="#_2、jquery层级选择器" aria-label="Permalink to &quot;2、jQuery层级选择器&quot;">​</a></h4><h4 id="_3、隐式迭代" tabindex="-1">3、隐式迭代 <a class="header-anchor" href="#_3、隐式迭代" aria-label="Permalink to &quot;3、隐式迭代&quot;">​</a></h4><blockquote><p>jQuery设置样式</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$(&quot;div&quot;).css(&#39;属性&#39;,&#39;值&#39;);</span></span></code></pre></div><p>便利内部DOM元素（伪数组形式存储）的过程叫做<strong>隐式迭代</strong></p><blockquote><p>简单理解：给匹配的所有元素进行循环遍历，执行相应的方法，而不用我们再进行循环，简化我们的操作，方便我们调用</p></blockquote><h4 id="_4、jquery筛选选择器" tabindex="-1">4、jQuery筛选选择器 <a class="header-anchor" href="#_4、jquery筛选选择器" aria-label="Permalink to &quot;4、jQuery筛选选择器&quot;">​</a></h4><h4 id="_5、jquery筛选方法" tabindex="-1">5、jQuery筛选方法 <a class="header-anchor" href="#_5、jquery筛选方法" aria-label="Permalink to &quot;5、jQuery筛选方法&quot;">​</a></h4><h4 id="_6、jquery排他思想" tabindex="-1">6、jQuery排他思想 <a class="header-anchor" href="#_6、jquery排他思想" aria-label="Permalink to &quot;6、jQuery排他思想&quot;">​</a></h4><ol><li>隐式迭代 给所有的按钮都绑定了点击事件</li><li>当前的元素变化背景颜色</li><li>其余的兄弟去掉背景颜色 隐式迭代</li></ol><h3 id="_2、jquery样式操作" tabindex="-1">2、jQuery样式操作 <a class="header-anchor" href="#_2、jquery样式操作" aria-label="Permalink to &quot;2、jQuery样式操作&quot;">​</a></h3><h4 id="_1、操作css方法" tabindex="-1">1、操作css方法 <a class="header-anchor" href="#_1、操作css方法" aria-label="Permalink to &quot;1、操作css方法&quot;">​</a></h4><ul><li>jQuery可以使用css方法来修改简单元素样式，也可以操作类，修改多个样式</li></ul><p>1、参数只写属性名，则返回属性值</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$(this).css(&quot;color&quot;);</span></span></code></pre></div><p>2、参数值属性名，属性值，逗号分隔，是一组样式，属性必须要加引号，值如果是数字可以不用写单位和引号</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$(this).css(&quot;color&quot;,&quot;red&quot;);</span></span></code></pre></div><p>3、参数是对象形式，方便设置多组样式，属性名和属性值用冒号隔开，属性可以不用加引号</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$(this).css({&quot;color&quot;:&quot;red&quot;,&quot;font-size&quot;:&quot;20px&quot;});</span></span>
<span class="line"><span>$(this).css({color:red,font-size:20px});</span></span></code></pre></div><h4 id="_2、设置类样式方法" tabindex="-1">2、设置类样式方法 <a class="header-anchor" href="#_2、设置类样式方法" aria-label="Permalink to &quot;2、设置类样式方法&quot;">​</a></h4><blockquote><p>作用等同于以前的classList，可以操作类样式，注意操作类里面的参数不要加点</p></blockquote><p>1、添加类</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$(&quot;div&quot;).addClass(&quot;current&quot;);</span></span></code></pre></div><p>2、移除类</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$(&quot;div&quot;).removeClass(&quot;current&quot;);</span></span></code></pre></div><p>3、切换类</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$(&quot;div&quot;).toggleClass(&quot;current&quot;);</span></span></code></pre></div><h3 id="_3、类操作与classname区别" tabindex="-1">3、类操作与className区别 <a class="header-anchor" href="#_3、类操作与classname区别" aria-label="Permalink to &quot;3、类操作与className区别&quot;">​</a></h3><ul><li>原生 JS 中 className 会覆盖元素原先里面的类名</li><li>jQuery里面类操作只是对指定类进行操作，不影响原先的类名（相当于追加类名，但以前的仍保留）</li></ul><h2 id="_4、jquery效果" tabindex="-1">4、jQuery效果 <a class="header-anchor" href="#_4、jquery效果" aria-label="Permalink to &quot;4、jQuery效果&quot;">​</a></h2><h3 id="_1、显示、隐藏效果" tabindex="-1">1、显示、隐藏效果 <a class="header-anchor" href="#_1、显示、隐藏效果" aria-label="Permalink to &quot;1、显示、隐藏效果&quot;">​</a></h3><h4 id="_1、显示语法规范" tabindex="-1">1、显示语法规范 <a class="header-anchor" href="#_1、显示语法规范" aria-label="Permalink to &quot;1、显示语法规范&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>show([speed],[easing],[fn]);</span></span></code></pre></div><ul><li>参数都可以省略，无动画直接显示</li><li>speed：三种预定速度之一的字符串（”slow“，”normal“，”fast“）或表示动画时长的毫秒数值</li><li>easing：（Optional）用来指定切换效果，默认是”swing“，可以用参数”linear“</li><li>fn：回调函数，在动画完成时执行的函数，每个元素执行一次</li></ul><h4 id="_2、隐藏语法规范" tabindex="-1">2、隐藏语法规范 <a class="header-anchor" href="#_2、隐藏语法规范" aria-label="Permalink to &quot;2、隐藏语法规范&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>hide([speed],[easing],[fn]);</span></span>
<span class="line"><span>hide(1000);</span></span>
<span class="line"><span>hide(1000, function() {</span></span>
<span class="line"><span>	alert(1);</span></span>
<span class="line"><span>})</span></span></code></pre></div><ul><li>参数都可以省略，无动画直接显示</li><li>speed：三种预定速度之一的字符串（”slow“，”normal“，”fast“）或表示动画时长的毫秒数值</li><li>easing：（Optional）用来指定切换效果，默认是”swing“，可以用参数”linear“</li><li>fn：回调函数，在动画完成时执行的函数，每个元素执行一次</li></ul><h4 id="_3、切换" tabindex="-1">3、切换 <a class="header-anchor" href="#_3、切换" aria-label="Permalink to &quot;3、切换&quot;">​</a></h4><ul><li>通过 jQuery，您可以使用 toggle() 方法来切换 hide() 和 show() 方法。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> $(&quot;p&quot;).toggle();</span></span></code></pre></div><h3 id="_2、淡入淡出" tabindex="-1">2、淡入淡出 <a class="header-anchor" href="#_2、淡入淡出" aria-label="Permalink to &quot;2、淡入淡出&quot;">​</a></h3><p>Fading 方法：</p><p>通过 jQuery，您可以实现元素的淡入淡出效果。</p><p>jQuery 拥有下面四种 fade 方法：</p><ul><li>fadeIn()</li><li>fadeOut()</li><li>fadeToggle()</li><li>fadeTo()</li></ul><h4 id="_1、fadein-方法" tabindex="-1">1、fadeIn() 方法 <a class="header-anchor" href="#_1、fadein-方法" aria-label="Permalink to &quot;1、fadeIn() 方法&quot;">​</a></h4><ul><li>jQuery fadeIn() 用于淡入已隐藏的元素。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fadeIn([speed],[easing],[fn]);</span></span></code></pre></div><h4 id="_2、fadeout-方法" tabindex="-1">2、fadeOut() 方法 <a class="header-anchor" href="#_2、fadeout-方法" aria-label="Permalink to &quot;2、fadeOut() 方法&quot;">​</a></h4><ul><li>jQuery fadeOut() 方法用于淡出可见元素。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fadeOut([speed],[easing],[fn]);</span></span></code></pre></div><h4 id="_3、fadetoggle-方法" tabindex="-1">3、fadeToggle() 方法 <a class="header-anchor" href="#_3、fadetoggle-方法" aria-label="Permalink to &quot;3、fadeToggle() 方法&quot;">​</a></h4><ul><li><p>jQuery fadeToggle() 方法可以在 fadeIn() 与 fadeOut() 方法之间进行切换。</p></li><li><p>如果元素已淡出，则 fadeToggle() 会向元素添加淡入效果。</p></li><li><p>如果元素已淡入，则 fadeToggle() 会向元素添加淡出效果。</p></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fadeToggle([speed],[easing],[fn]);</span></span></code></pre></div><h4 id="_4、fadeto-方法" tabindex="-1">4、fadeTo() 方法 <a class="header-anchor" href="#_4、fadeto-方法" aria-label="Permalink to &quot;4、fadeTo() 方法&quot;">​</a></h4><ul><li>jQuery fadeTo() 方法允许渐变为给定的不透明度（值介于 0 与 1 之间）。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>fadeTO([speed],[easing],opacity,[fn]);</span></span></code></pre></div><ul><li>opacity透明度必须写，取值0~1之间</li></ul><h3 id="_3、滑动" tabindex="-1">3、滑动 <a class="header-anchor" href="#_3、滑动" aria-label="Permalink to &quot;3、滑动&quot;">​</a></h3><p>通过 jQuery，您可以在元素上创建滑动效果。</p><p>jQuery 拥有以下滑动方法：</p><ul><li>slideDown()</li><li>slideUp()</li><li>slideToggle()</li></ul><h4 id="_1、slidedown-方法" tabindex="-1">1、slideDown() 方法 <a class="header-anchor" href="#_1、slidedown-方法" aria-label="Permalink to &quot;1、slideDown() 方法&quot;">​</a></h4><ul><li>jQuery slideDown() 方法用于向下滑动元素。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>slideDown([speed],[easing],[fn]);</span></span></code></pre></div><h4 id="_2、slideup-方法" tabindex="-1">2、slideUp() 方法 <a class="header-anchor" href="#_2、slideup-方法" aria-label="Permalink to &quot;2、slideUp() 方法&quot;">​</a></h4><ul><li>jQuery slideUp() 方法用于向上滑动元素。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>slideUp([speed],[easing],[fn]);</span></span></code></pre></div><h4 id="_3、slidetoggle-方法" tabindex="-1">3、slideToggle() 方法 <a class="header-anchor" href="#_3、slidetoggle-方法" aria-label="Permalink to &quot;3、slideToggle() 方法&quot;">​</a></h4><ul><li><p>jQuery slideToggle() 方法可以在 slideDown() 与 slideUp() 方法之间进行切换。</p></li><li><p>如果元素向下滑动，则 slideToggle() 可向上滑动它们。</p></li><li><p>如果元素向上滑动，则 slideToggle() 可向下滑动它们。</p></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>slideToggle([speed],[easing],[fn]);</span></span></code></pre></div><h3 id="_4、动画" tabindex="-1">4、动画 <a class="header-anchor" href="#_4、动画" aria-label="Permalink to &quot;4、动画&quot;">​</a></h3><h4 id="_1、语法" tabindex="-1">1、语法 <a class="header-anchor" href="#_1、语法" aria-label="Permalink to &quot;1、语法&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>animate(params,[speed],[easing],[fn]);</span></span></code></pre></div><ul><li>params:想要更改的样式属性，以对象形式传递，<strong>必须写</strong>。属性名可以不用带引号，如果时复合属性则需要采取驼峰命名法borderLeft。其余参数可以省略</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$(&quot;button&quot;).click(function(){</span></span>
<span class="line"><span>  $(&quot;div&quot;).animate({left:&#39;250px&#39;});</span></span>
<span class="line"><span>});</span></span></code></pre></div><p>可以多个属性</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$(&quot;button&quot;).click(function(){</span></span>
<span class="line"><span>  $(&quot;div&quot;).animate({</span></span>
<span class="line"><span>    left: 250px,</span></span>
<span class="line"><span>    opacity: 0.5,</span></span>
<span class="line"><span>    height: 150px,</span></span>
<span class="line"><span>    width: 150px</span></span>
<span class="line"><span>  });</span></span>
<span class="line"><span>});</span></span></code></pre></div><h3 id="_5、停止动画" tabindex="-1">5、停止动画 <a class="header-anchor" href="#_5、停止动画" aria-label="Permalink to &quot;5、停止动画&quot;">​</a></h3><p>jQuery stop() 方法用于停止动画或效果，在它们完成之前。</p><ul><li>stop() 方法适用于所有 jQuery 效果函数，包括滑动、淡入淡出和自定义动画。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>stop(stopAll,goToEnd);</span></span></code></pre></div><ul><li><p>可选的 stopAll 参数规定是否应该清除动画队列。默认是 false，即仅停止活动的动画，允许任何排入队列的动画向后执行。</p></li><li><p>可选的 goToEnd 参数规定是否立即完成当前动画。默认是 false。</p></li></ul><blockquote><p>因此，默认地，stop() 会清除在被选元素上指定的当前动画。</p></blockquote><h2 id="_5、jquery属性操作" tabindex="-1">5、jQuery属性操作 <a class="header-anchor" href="#_5、jquery属性操作" aria-label="Permalink to &quot;5、jQuery属性操作&quot;">​</a></h2><h4 id="_1、prop" tabindex="-1">1、prop() <a class="header-anchor" href="#_1、prop" aria-label="Permalink to &quot;1、prop()&quot;">​</a></h4><ul><li>设置或获取元素固有属性值</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>prop()</span></span></code></pre></div><h4 id="_2、attr" tabindex="-1">2、attr() <a class="header-anchor" href="#_2、attr" aria-label="Permalink to &quot;2、attr()&quot;">​</a></h4><ul><li>设置或获取自定义属性</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>attr(&quot;属性&quot;)	//类似原生getAttribute</span></span>
<span class="line"><span>attr(&quot;属性&quot;,&quot;属性值&quot;)	//类似原生setAttribute</span></span></code></pre></div><h4 id="_3、data" tabindex="-1">3、data() <a class="header-anchor" href="#_3、data" aria-label="Permalink to &quot;3、data()&quot;">​</a></h4><ul><li>数据缓存 data() 这个里面吗的数据是存放在元素的内存里面</li><li>这个方法获取data-index h5自定义属性 第一个 不用写data- 而且返回的是数字型</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>data(&quot;index&quot;)</span></span></code></pre></div><h2 id="_6、jquery内容文本值" tabindex="-1">6、jQuery内容文本值 <a class="header-anchor" href="#_6、jquery内容文本值" aria-label="Permalink to &quot;6、jQuery内容文本值&quot;">​</a></h2><ul><li>主要针对元素的内容还有表单的值操作</li></ul><h3 id="_1、普通元素内容html" tabindex="-1">1、普通元素内容html() <a class="header-anchor" href="#_1、普通元素内容html" aria-label="Permalink to &quot;1、普通元素内容html()&quot;">​</a></h3><ul><li>相当于原生innerHTML</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>html()	//获取元素的内容</span></span>
<span class="line"><span>html(&quot;内容&quot;)	//设置元素的内容</span></span></code></pre></div><h3 id="_2、普通元素文本内容text" tabindex="-1">2、普通元素文本内容text() <a class="header-anchor" href="#_2、普通元素文本内容text" aria-label="Permalink to &quot;2、普通元素文本内容text()&quot;">​</a></h3><ul><li>相当于原生innerText</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>text()	//获取元素的内容</span></span>
<span class="line"><span>text(&quot;内容&quot;)	//设置元素的内容</span></span></code></pre></div><h3 id="_3、表单值" tabindex="-1">3、表单值 <a class="header-anchor" href="#_3、表单值" aria-label="Permalink to &quot;3、表单值&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>val()	//获取元素的值</span></span>
<span class="line"><span>val(&quot;值&quot;)	//设置元素的值</span></span></code></pre></div><h2 id="_7、jquery元素操作" tabindex="-1">7、jQuery元素操作 <a class="header-anchor" href="#_7、jquery元素操作" aria-label="Permalink to &quot;7、jQuery元素操作&quot;">​</a></h2><ul><li>主要是遍历、创建、添加、删除元素操作</li></ul><h3 id="_1、遍历元素" tabindex="-1">1、遍历元素 <a class="header-anchor" href="#_1、遍历元素" aria-label="Permalink to &quot;1、遍历元素&quot;">​</a></h3><h4 id="语法1" tabindex="-1"><strong>语法1</strong> <a class="header-anchor" href="#语法1" aria-label="Permalink to &quot;**语法1**&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$(&quot;div&quot;).each(function (index, domEle) {</span></span>
<span class="line"><span>	操作;</span></span>
<span class="line"><span>})</span></span></code></pre></div><ul><li>each()方法遍历匹配的每一个元素。主要用DOM处理，each每一个</li><li>里面的回调函数有2个参数：idea是每个元素的索引号，domEle是每隔DOM元素对象，不是jQuery对象</li><li>所以想要使用jQuery方法，需要给这个dom元素转换为jQuery对象 <strong>$(domEle)</strong></li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;green&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;blue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;div&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">each</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">domEle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 回调函数第一个参数一定是索引号   可以指定</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 回调函数第二个参数一定是 dom 元素对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(domEle);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(domEle).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">css</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;color&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,arr[i]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(domEle).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="语法2" tabindex="-1"><strong>语法2</strong> <a class="header-anchor" href="#语法2" aria-label="Permalink to &quot;**语法2**&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$.each(object,function (index, element) {</span></span>
<span class="line"><span>	操作;</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$.each($(&quot;div&quot;),function (i, ele) {</span></span>
<span class="line"><span>	console.log(i);</span></span>
<span class="line"><span>	console.log(ele);</span></span>
<span class="line"><span>})</span></span></code></pre></div><ul><li>$.each()方法可以用于遍历任何对象，主要用于数据处理，比如数组、对象</li><li>index：每个元素的索引号</li><li>element：遍历内容</li></ul><h2 id="_8、jquery尺寸、位置操作" tabindex="-1">8、jQuery尺寸、位置操作 <a class="header-anchor" href="#_8、jquery尺寸、位置操作" aria-label="Permalink to &quot;8、jQuery尺寸、位置操作&quot;">​</a></h2><h3 id="_1、尺寸" tabindex="-1">1、尺寸 <a class="header-anchor" href="#_1、尺寸" aria-label="Permalink to &quot;1、尺寸&quot;">​</a></h3><h4 id="_1、width-和height-方法" tabindex="-1">1、width()和height() 方法 <a class="header-anchor" href="#_1、width-和height-方法" aria-label="Permalink to &quot;1、width()和height() 方法&quot;">​</a></h4><ul><li>width() 方法设置或返回元素的宽度（不包括内边距、边框或外边距）。</li><li>height() 方法设置或返回元素的高度（不包括内边距、边框或外边距）。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> txt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  txt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;div 的宽度是: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#div1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;/br&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  txt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;div 的高度是: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#div1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#div1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(txt);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h4 id="_2、innerwidth-和-innerheight-方法" tabindex="-1">2、innerWidth() 和 innerHeight() 方法 <a class="header-anchor" href="#_2、innerwidth-和-innerheight-方法" aria-label="Permalink to &quot;2、innerWidth() 和 innerHeight() 方法&quot;">​</a></h4><ul><li>innerWidth() 方法返回元素的宽度（包括内边距）。</li><li>innerHeight() 方法返回元素的高度（包括内边距）。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> txt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  txt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;div 宽度，包含内边距: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#div1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">innerWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;/br&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    txt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;div 高度，包含内边距: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#div1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">innerHeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#div1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(txt);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h4 id="_3、outerwidth-和-outerheight-方法" tabindex="-1">3、outerWidth() 和 outerHeight() 方法 <a class="header-anchor" href="#_3、outerwidth-和-outerheight-方法" aria-label="Permalink to &quot;3、outerWidth() 和 outerHeight() 方法&quot;">​</a></h4><ul><li><p>outerWidth() 方法返回元素的宽度（包括内边距和边框）。</p></li><li><p>outerHeight() 方法返回元素的高度（包括内边距和边框）。</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> txt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  txt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;div 宽度，包含内边距和边框: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#div1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">outerWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;/br&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  txt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;div 高度，包含内边距和边框: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#div1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">outerHeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  $</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#div1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(txt);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="_2、位置" tabindex="-1">2、位置 <a class="header-anchor" href="#_2、位置" aria-label="Permalink to &quot;2、位置&quot;">​</a></h3><p>1、offset()</p><ul><li>设置或获取元素偏移</li></ul><ol><li>offset()方法设置会返回被选元素相对于文档的偏移坐标，跟父级没有关系</li><li>该方法有2个属性left、top。<strong>left</strong>：距离文档左侧的距离；<strong>top</strong>：距离文档顶部的距离</li><li>可以设置元素的偏移</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>offset({top:10,left30})</span></span></code></pre></div><p>2、position()</p><ul><li>获取距离带有定位的父级位置（偏移） 如果父级没有定位，则以文档为准</li><li>只能获取不能设置</li></ul><p>3、scrollTop()/scrollLeft()</p><ul><li>设置或获取元素被卷去的头部和左侧</li></ul><h2 id="_9、jquery事件" tabindex="-1">9、jQuery事件 <a class="header-anchor" href="#_9、jquery事件" aria-label="Permalink to &quot;9、jQuery事件&quot;">​</a></h2><h3 id="_1、jquery事件注册" tabindex="-1">1、jQuery事件注册 <a class="header-anchor" href="#_1、jquery事件注册" aria-label="Permalink to &quot;1、jQuery事件注册&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>element.事件(function() { })</span></span>
<span class="line"><span>$(&quot;div&quot;).clock(function() { 事件处理程序 })</span></span></code></pre></div><p>其他事件和原生基本一致</p><h3 id="_2、jquery事件处理" tabindex="-1">2、jQuery事件处理 <a class="header-anchor" href="#_2、jquery事件处理" aria-label="Permalink to &quot;2、jQuery事件处理&quot;">​</a></h3><h4 id="_1、on-绑定事件" tabindex="-1">1、on()绑定事件 <a class="header-anchor" href="#_1、on-绑定事件" aria-label="Permalink to &quot;1、on()绑定事件&quot;">​</a></h4><ul><li>在匹配元素上绑定一个或多个事件的事件处理函数</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>element.on(events,[selector],fn)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$(&quot;div&quot;).on({ </span></span>
<span class="line"><span>	mouseenter:function() {</span></span>
<span class="line"><span>		$(this).css(&quot;background&quot;,&quot;red&quot;);</span></span>
<span class="line"><span>	},</span></span>
<span class="line"><span>    click:function() {</span></span>
<span class="line"><span>    	$(this).css(&quot;background&quot;,&quot;red&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>})</span></span></code></pre></div><ul><li>events：一个或多个用空格分隔的事件类型，如”click“或”keydown“</li><li>selector：元素的子元素选择器</li></ul><p><strong>on()优势</strong></p><ul><li>可以绑定多个事件，多个处理事件程序</li><li>如果事件处理程序相同</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$(&quot;div&quot;).on(&quot;mouseenter mouseover&quot;, function() { })</span></span></code></pre></div><ul><li>可以事件委派操作。事件委派的定义是，把原来嫁给子元素身上的事件绑定在父元素身上，就是把事件委派给父元素</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$(&quot;div&quot;).on(&quot;mouseenter&quot;,&quot;li&quot;, function() { })</span></span></code></pre></div><ul><li>动态创建的元素，click()没有办法绑定事件，on()可以给动态生成的元素绑定事件</li></ul><h4 id="_2、off-解绑事件" tabindex="-1">2、off()解绑事件 <a class="header-anchor" href="#_2、off-解绑事件" aria-label="Permalink to &quot;2、off()解绑事件&quot;">​</a></h4><ul><li>off()方法可以移除通过on()方法添加的事件处理程序</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$(&quot;p&quot;).off()	//解绑p元素所有的事件处理程序</span></span>
<span class="line"><span>$(&quot;p&quot;).off(&quot;click&quot;)	//解绑p元素的点击事件	后面的foo是侦听函数名</span></span>
<span class="line"><span>$(&quot;p&quot;).off(&quot;click&quot;,&quot;li&quot;)	//解绑事件委托</span></span></code></pre></div><h4 id="_3、trigger-自动触发事件" tabindex="-1">3、trigger()自动触发事件 <a class="header-anchor" href="#_3、trigger-自动触发事件" aria-label="Permalink to &quot;3、trigger()自动触发事件&quot;">​</a></h4><ul><li>有些事件希望自动触发，如轮播图。可以利用定时器自动触发右侧按钮点击事件，不必鼠标点击触发</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>element.click()	//第一种简写</span></span>
<span class="line"><span>element.trigger(&quot;type&quot;)	//第二种自动触发模式</span></span>
<span class="line"><span>element.triggerHandler(type)	//第三种	不会触发元素的默认行为</span></span></code></pre></div><h3 id="_3、jquery事件对象" tabindex="-1">3、jQuery事件对象 <a class="header-anchor" href="#_3、jquery事件对象" aria-label="Permalink to &quot;3、jQuery事件对象&quot;">​</a></h3><ul><li>事件被触发，就会有事件对象的产生</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>element.on(events,[selector],function(event) {})</span></span></code></pre></div><ul><li>阻止默认行为：event.preventDefault()或者return flase</li><li>阻止冒泡：event.stopPropagation()</li></ul><h2 id="_10、jquery其他方法" tabindex="-1">10、jQuery其他方法 <a class="header-anchor" href="#_10、jquery其他方法" aria-label="Permalink to &quot;10、jQuery其他方法&quot;">​</a></h2><h3 id="_1、jquery拷贝对象" tabindex="-1">1、jQuery拷贝对象 <a class="header-anchor" href="#_1、jquery拷贝对象" aria-label="Permalink to &quot;1、jQuery拷贝对象&quot;">​</a></h3><ul><li>如果想要把某个对象拷贝（合并）给另外一个对象使用，此时可以使用<code>$.extend()</code>方法</li><li>如果目的对象原有属性和值，那么拷贝后会覆盖原有的属性值</li></ul><p>语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$.extend([deep],target,object1,[objectN])</span></span></code></pre></div><ul><li>deep：如果设为true为深拷贝，默认为false 浅拷贝 <ul><li>浅拷贝：把原来对象里面吗的复杂数据类型中的地址拷贝给目的对象，修改目的对象会影响被拷贝对象</li><li>深拷贝：拷贝的是对象，不是地址，修改目的对象不会影响被拷贝对象</li></ul></li><li>target：要拷贝的目标对象</li><li>object1：待拷贝到第一个对象的对象</li></ul><h3 id="_2、多库共存" tabindex="-1">2、多库共存 <a class="header-anchor" href="#_2、多库共存" aria-label="Permalink to &quot;2、多库共存&quot;">​</a></h3><ul><li>jQuery使用$作为标识符，随着jQuery的流行，其他js库也会用这个$作为标识符，这样一起使用就会引起冲突</li></ul><blockquote><p>问题：让jQuery和其他js库不存在冲突，可以同时存在，这个就叫做多库共存</p></blockquote><p>解决方案：</p><ul><li>把里面的$符号同一改为jQuery</li><li>jQuery遍历规定新的名称：<code>$.noConflict()</code></li></ul>`,203),l=[n];function p(h,o,d,r,k,u){return i(),a("div",null,l)}const E=s(t,[["render",p]]);export{g as __pageData,E as default};
