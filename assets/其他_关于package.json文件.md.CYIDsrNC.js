import{_ as e,c as a,o as s,a5 as i}from"./chunks/framework.DDBsw1uY.js";const g=JSON.parse('{"title":"package.json","description":"","frontmatter":{},"headers":[],"relativePath":"其他/关于package.json文件.md","filePath":"其他/关于package.json文件.md","lastUpdated":1718961612000}'),o={name:"其他/关于package.json文件.md"},t=i('<h1 id="package-json" tabindex="-1">package.json <a class="header-anchor" href="#package-json" aria-label="Permalink to &quot;package.json&quot;">​</a></h1><h2 id="name" tabindex="-1"><code>name</code> <a class="header-anchor" href="#name" aria-label="Permalink to &quot;`name`&quot;">​</a></h2><p>项目的名称，通常使用小写字母，没有空格，可以使用横线或下划线</p><h2 id="version" tabindex="-1"><code>version</code> <a class="header-anchor" href="#version" aria-label="Permalink to &quot;`version`&quot;">​</a></h2><p>项目的版本号</p><h2 id="description" tabindex="-1"><code>description</code> <a class="header-anchor" href="#description" aria-label="Permalink to &quot;`description`&quot;">​</a></h2><p>项目的简要描述，它对于 <code>SEO</code> 也很有用，因为它帮助其他人可以在<code>npmjs.com</code> 网站上找到我们的软件包</p><h2 id="main" tabindex="-1"><code>main</code> <a class="header-anchor" href="#main" aria-label="Permalink to &quot;`main`&quot;">​</a></h2><p>入口文件，指定了项目的主要入口文件</p><h2 id="scripts" tabindex="-1"><code>scripts</code> <a class="header-anchor" href="#scripts" aria-label="Permalink to &quot;`scripts`&quot;">​</a></h2><p>包含了一些脚本命令，可以通过 <code>npm run script-name</code> 运行。例如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mocha test&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="dependencies" tabindex="-1"><code>dependencies</code> <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;`dependencies`&quot;">​</a></h2><p>生产环境依赖，即在生产环境中运行时需要的依赖包</p><p>我们在<code>dependencies</code>中看到的脱字号 (<code>^</code>) 和波形符 (<code>~</code>) 是 <a href="https://link.juejin.cn?target=https%3A%2F%2Fsemver.org%2F" target="_blank" rel="noreferrer">SemVer</a> 中定义的版本范围的表示法。</p><p>在语义版本控制中,版本号由三个数字组成,格式如下:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`主版本号.次版本号.修订号`</span></span></code></pre></div><ul><li>脱字符号(<code>^</code>)表示允许更新到最新的次版本号: <ul><li><code>^1.2.3</code> 表示 <code>&gt;=1.2.3</code> 并且 <code>&lt;2.0.0</code> 的最新版本</li></ul></li><li>波形符(<code>~</code>)表示允许更新到最新的修订号: <ul><li><code>~1.2.3</code> 表示<code> &gt;=1.2.3</code> 并且 <code>&lt;1.3.0</code> 的最新版本</li></ul></li></ul><p>所以简单来说:</p><blockquote><ul><li><code>^</code> 用于锁定主版本号和次版本号</li><li><code>~</code> 用于锁定主版本号和次版本号及修订号</li></ul></blockquote><h2 id="devdependencies" tabindex="-1"><code>devDependencies</code> <a class="header-anchor" href="#devdependencies" aria-label="Permalink to &quot;`devDependencies`&quot;">​</a></h2><p>开发环境依赖，即在开发时需要的依赖包</p><p>--save-dev</p><h2 id="keywords" tabindex="-1"><code>keywords</code> <a class="header-anchor" href="#keywords" aria-label="Permalink to &quot;`keywords`&quot;">​</a></h2><p>关键字数组，用于描述项目，有助于其他人搜索到你的项目</p><h2 id="author" tabindex="-1"><code>author</code> <a class="header-anchor" href="#author" aria-label="Permalink to &quot;`author`&quot;">​</a></h2><p>项目的作者。</p><h2 id="license" tabindex="-1"><code>license</code> <a class="header-anchor" href="#license" aria-label="Permalink to &quot;`license`&quot;">​</a></h2><p>项目的许可证，它向使用包的用户描述了我们在使用此软件包时设置的<strong>权限</strong>和<strong>限制</strong> 如果我们不希望在任何条件下向软件包的用户授予任何权限，可以将此字段设置为 <code>UNLICENSED</code></p><h2 id="repository" tabindex="-1"><code>repository</code> <a class="header-anchor" href="#repository" aria-label="Permalink to &quot;`repository`&quot;">​</a></h2><p>项目的仓库信息，通常包括 <code>type</code>（仓库类型）和 <code>url</code>（仓库地址）。</p><h2 id="engines" tabindex="-1"><code>engines</code> <a class="header-anchor" href="#engines" aria-label="Permalink to &quot;`engines`&quot;">​</a></h2><p>指定项目运行所需的 Node.js 版本范围。</p><h2 id="private" tabindex="-1"><code>private</code> <a class="header-anchor" href="#private" aria-label="Permalink to &quot;`private`&quot;">​</a></h2><p>一个布尔值，用于指定该项目是否为私有项目，防止意外发布软件包</p><h2 id="browserslist" tabindex="-1"><code>browserslist</code> <a class="header-anchor" href="#browserslist" aria-label="Permalink to &quot;`browserslist`&quot;">​</a></h2><p>指定项目的目标浏览器范围。</p><h2 id="homepage" tabindex="-1"><code>homepage</code> <a class="header-anchor" href="#homepage" aria-label="Permalink to &quot;`homepage`&quot;">​</a></h2><p>通常，我们会在此字段中链接到项目的网站地址。或者，我们还可以指向项目的 <code>README</code> 或文档</p><h2 id="bugs" tabindex="-1"><code>bugs</code> <a class="header-anchor" href="#bugs" aria-label="Permalink to &quot;`bugs`&quot;">​</a></h2><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;bugs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://github.com/owner/project/issues&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;project@hostname.com&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当别人使用了我们的包，在遇到问题后可以依据这个字段提供的<code>url</code>和<code>email</code>来提出问题，并尝试在需要的地方寻找解决方案。</p><p>如果我们不想提供支持电子邮件，我们可以直接将 <code>URL</code> 分配给 <code>bugs</code> 属性。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;bugs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://github.com/owner/project/issues&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="exports" tabindex="-1"><code>exports</code> <a class="header-anchor" href="#exports" aria-label="Permalink to &quot;`exports`&quot;">​</a></h2><p>我们可以使用 <code>exports</code> 字段定义软件包的入口点，作为 <code>main</code> 字段的替代方案。与 <code>main</code> 不同，<code>exports</code> 允许我们定义<code>子路径导出</code>和<code>条件导出</code>。</p><h2 id="type" tabindex="-1"><code>type</code> <a class="header-anchor" href="#type" aria-label="Permalink to &quot;`type`&quot;">​</a></h2><p>此字段描述了当前软件包中的<code>.js</code> 文件应该被视为 <code>ESM</code> 还是 <code>commonjs</code>。我们可以为 <code>ESM</code> 设置<code>module</code>类型，并为<code>非ESM</code> 软件包设置 <code>commonjs</code></p><p>此外，我们还可以明确指定文件是否应该解释为 <code>ESM</code> 或 <code>commonjs</code>，使用<code>.mjs</code> 扩展名表示 <code>ESM</code>，<code>.cjs</code>扩展名表示 <code>commonjs</code> 文件。</p>',49),n=[t];function d(c,l,p,h,r,k){return s(),a("div",null,n)}const E=e(o,[["render",d]]);export{g as __pageData,E as default};
