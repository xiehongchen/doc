import{_ as a,c as i,o as e,a5 as t}from"./chunks/framework.DDBsw1uY.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"其他/git.md","filePath":"其他/git.md","lastUpdated":1718785297000}'),l={name:"其他/git.md"},s=t(`<h2 id="版本控制工具" tabindex="-1">版本控制工具 <a class="header-anchor" href="#版本控制工具" aria-label="Permalink to &quot;版本控制工具&quot;">​</a></h2><h3 id="集中式版本控制工具" tabindex="-1">集中式版本控制工具 <a class="header-anchor" href="#集中式版本控制工具" aria-label="Permalink to &quot;集中式版本控制工具&quot;">​</a></h3><p>CVS、<strong>SVN</strong>、VSS</p><ul><li>单一的集中管理服务器</li></ul><h3 id="分布式版本控制工具" tabindex="-1">分布式版本控制工具 <a class="header-anchor" href="#分布式版本控制工具" aria-label="Permalink to &quot;分布式版本控制工具&quot;">​</a></h3><p>Git</p><h2 id="工作机制" tabindex="-1">工作机制 <a class="header-anchor" href="#工作机制" aria-label="Permalink to &quot;工作机制&quot;">​</a></h2><ul><li>工作区——写代码的文件</li><li>暂存区——本地的临时存储</li><li>本地库——历史版本</li><li>远程库——代码托管中心</li></ul><h2 id="git命令" tabindex="-1">git命令 <a class="header-anchor" href="#git命令" aria-label="Permalink to &quot;git命令&quot;">​</a></h2><h3 id="_1、设置用户签名" tabindex="-1">1、设置用户签名 <a class="header-anchor" href="#_1、设置用户签名" aria-label="Permalink to &quot;1、设置用户签名&quot;">​</a></h3><ul><li>文件存放在 <code>C:\\Users\\用户名\\.gitconfig</code></li></ul><h3 id="_2、初始化本地库" tabindex="-1">2、初始化本地库 <a class="header-anchor" href="#_2、初始化本地库" aria-label="Permalink to &quot;2、初始化本地库&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git init</span></span></code></pre></div><h3 id="_3、查看本地库状态" tabindex="-1">3、查看本地库状态 <a class="header-anchor" href="#_3、查看本地库状态" aria-label="Permalink to &quot;3、查看本地库状态&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git status</span></span></code></pre></div><ul><li>红色的文件——未被追踪的文件，只存在<strong>工作区</strong></li></ul><h3 id="_4、添加暂存区" tabindex="-1">4、添加暂存区 <a class="header-anchor" href="#_4、添加暂存区" aria-label="Permalink to &quot;4、添加暂存区&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git add 文件名</span></span>
<span class="line"><span>git add .	//所有文件</span></span></code></pre></div><ul><li>红色文件变成绿色文件——追踪到的文件，存放在暂存区</li></ul><h3 id="_5、提交本地库" tabindex="-1">5、提交本地库 <a class="header-anchor" href="#_5、提交本地库" aria-label="Permalink to &quot;5、提交本地库&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git commit -m &quot;日志信息&quot; 文件名</span></span></code></pre></div><ul><li>-m 提交信息</li></ul><h3 id="_6、版本穿梭" tabindex="-1">6、版本穿梭 <a class="header-anchor" href="#_6、版本穿梭" aria-label="Permalink to &quot;6、版本穿梭&quot;">​</a></h3><ul><li>查看版本详细信息</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git log</span></span></code></pre></div><ul><li>查看版本信息</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git reflog</span></span></code></pre></div><ul><li>版本穿梭</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git reset --hard 版本号</span></span></code></pre></div><p>头指针指向master分支，master分支指向7378390这个版本</p><ul><li>头指针指向master分支，master分支会指向最新的版本</li><li>可以穿梭回去，指向之前的版本</li><li>git控制版本——在本地库内存记录了很多日记、版本信息，切换版本后master分支指向指定的版本</li></ul><h3 id="_7、修改文件" tabindex="-1">7、修改文件 <a class="header-anchor" href="#_7、修改文件" aria-label="Permalink to &quot;7、修改文件&quot;">​</a></h3><ul><li>修改文件后，会变成红色文件，为未被追踪的文件，也就说没有提交到暂存区</li></ul><ul><li>重新提交到暂存区后，已被追踪，接下来需要提交到本地库</li></ul><ul><li>这里就会显示两个版本信息了</li><li><strong>当前指针指向最新提交的版本</strong></li></ul><h2 id="git分支操作" tabindex="-1">git分支操作 <a class="header-anchor" href="#git分支操作" aria-label="Permalink to &quot;git分支操作&quot;">​</a></h2><h3 id="_1、什么是分支" tabindex="-1">1、什么是分支 <a class="header-anchor" href="#_1、什么是分支" aria-label="Permalink to &quot;1、什么是分支&quot;">​</a></h3><ul><li>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个人物的单独分支。</li><li>使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己的分支的时候，不会影响主线分支的运行</li><li>对于初学者来说，分支可以简单理解为副本，一个分支就是一个单独的副本</li><li>分支底层其实也是指针的引用</li></ul><h3 id="_2、分支的好处" tabindex="-1">2、分支的好处 <a class="header-anchor" href="#_2、分支的好处" aria-label="Permalink to &quot;2、分支的好处&quot;">​</a></h3><ul><li>同时并行推进多个功能开发，提高开发效率</li><li>各个分支在开发过程中，如果某一个分支开发失败，不会影响其他分支，失败的分支删除重新开始即可</li></ul><h3 id="_3、分支的操作" tabindex="-1">3、分支的操作 <a class="header-anchor" href="#_3、分支的操作" aria-label="Permalink to &quot;3、分支的操作&quot;">​</a></h3><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定的分支合并到当前分支上</td></tr></tbody></table><h4 id="_1、查看分支" tabindex="-1">1、查看分支 <a class="header-anchor" href="#_1、查看分支" aria-label="Permalink to &quot;1、查看分支&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git branch -v</span></span></code></pre></div><h4 id="_2、创建分支" tabindex="-1">2、创建分支 <a class="header-anchor" href="#_2、创建分支" aria-label="Permalink to &quot;2、创建分支&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git branch 分支名</span></span></code></pre></div><h4 id="_3、切换分支" tabindex="-1">3、切换分支 <a class="header-anchor" href="#_3、切换分支" aria-label="Permalink to &quot;3、切换分支&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git checkout 分支名</span></span></code></pre></div><h4 id="_4、分支合并" tabindex="-1">4、分支合并 <a class="header-anchor" href="#_4、分支合并" aria-label="Permalink to &quot;4、分支合并&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git merge 分支名</span></span></code></pre></div><ul><li>把后面的分支合并到当前分支上</li><li>只会修改合并的分支，也就说当前分支，被合并的分支并不受影响</li></ul><p>1、正常合并</p><p>2、冲突合并</p><ul><li>两个分支修改同一个文件相同行或相邻行，就会冲突</li><li>这时候就需要手动操作，自己决定要保留哪些代码</li></ul><ul><li>这里可以看到，maste合并中，说明合并还没有成功</li><li>需要自己手动合并代码</li></ul><ul><li>自己进行操作，决定留下哪些</li><li>合并成功后，需要重新提交暂存区，然后提交本地库。</li><li>注意：这里提交本地库 不能带文件名，只需要前面即可</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git commit -m &quot;日子信息&quot;</span></span></code></pre></div><h2 id="团队协作机制" tabindex="-1">团队协作机制 <a class="header-anchor" href="#团队协作机制" aria-label="Permalink to &quot;团队协作机制&quot;">​</a></h2><h3 id="_1、团队内协作" tabindex="-1">1、团队内协作 <a class="header-anchor" href="#_1、团队内协作" aria-label="Permalink to &quot;1、团队内协作&quot;">​</a></h3><ol><li>push——推送代码，提交到代码托管中心</li><li>clone——克隆代码</li><li>push——本地修改后，推送代码，提交到代码托管中心</li><li>pull——拉取代码，更新本地库</li><li>这样两个本地库和代码托管中心就保持一致了</li></ol><h3 id="_2、跨团队协作" tabindex="-1">2、跨团队协作 <a class="header-anchor" href="#_2、跨团队协作" aria-label="Permalink to &quot;2、跨团队协作&quot;">​</a></h3><ol><li>fork——将第一个团队的远程库全部复制一份到第二个团队的远程库里</li><li>clone——第二个团队克隆代码</li><li>push——第二个团队修改后，推送代码，提交到第二个团队自己的远程库</li><li>pull request——第二个团队向第一个团队发出拉取请求</li><li>merge——审核，合并</li><li>pull——拉取本地库</li></ol><h2 id="github操作" tabindex="-1">GitHub操作 <a class="header-anchor" href="#github操作" aria-label="Permalink to &quot;GitHub操作&quot;">​</a></h2><h3 id="_1、创建远程库-别名" tabindex="-1">1、创建远程库&amp;别名 <a class="header-anchor" href="#_1、创建远程库-别名" aria-label="Permalink to &quot;1、创建远程库&amp;别名&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> git remote add demo https://github.com/xiehongchen/demo.git</span></span></code></pre></div><ul><li>demo——别名</li><li><a href="https://github.com/xiehongchen/demo.git%E2%80%94%E2%80%94GitHub%E4%B8%8A%E7%9A%84%E8%BF%9C%E7%A8%8B%E5%BA%93" target="_blank" rel="noreferrer">https://github.com/xiehongchen/demo.git——GitHub上的远程库</a></li></ul><p><strong>查看别名</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git remote -v</span></span></code></pre></div><ul><li>fetch——拉取</li><li>push——推送</li></ul><h3 id="_2、推送本地库到远程库" tabindex="-1">2、推送本地库到远程库 <a class="header-anchor" href="#_2、推送本地库到远程库" aria-label="Permalink to &quot;2、推送本地库到远程库&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git push 别名 分支</span></span></code></pre></div><h3 id="_3、拉取远程库到本地库" tabindex="-1">3、拉取远程库到本地库 <a class="header-anchor" href="#_3、拉取远程库到本地库" aria-label="Permalink to &quot;3、拉取远程库到本地库&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git pull 别名 分支</span></span></code></pre></div><h3 id="_4、克隆远程库到本地" tabindex="-1">4、克隆远程库到本地 <a class="header-anchor" href="#_4、克隆远程库到本地" aria-label="Permalink to &quot;4、克隆远程库到本地&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git clone 远程地址</span></span></code></pre></div><p><strong>clone：</strong></p><ol><li>拉取代码</li><li>初始化本地仓库</li><li>创建别名（默认origin）</li></ol>`,77),n=[s];function o(h,d,p,r,c,u){return e(),i("div",null,n)}const m=a(l,[["render",o]]);export{b as __pageData,m as default};
