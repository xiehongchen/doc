import{_ as s,c as a,o as i,a5 as n,aB as l,aC as t,aD as h,aE as e,aF as p}from"./chunks/framework.B7o55Ran.js";const v=JSON.parse('{"title":"JavaScript","description":"","frontmatter":{},"headers":[],"relativePath":"前端/javascript/JavaScript基础.md","filePath":"前端/javascript/JavaScript基础.md","lastUpdated":1718683173000}'),k={name:"前端/javascript/JavaScript基础.md"},r=n(`<h1 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JavaScript&quot;">​</a></h1><h3 id="js组成" tabindex="-1">JS组成 <a class="header-anchor" href="#js组成" aria-label="Permalink to &quot;JS组成&quot;">​</a></h3><ul><li>ECMAScript——JavaScript语法</li><li>DOM——页面文档对象模型</li><li>BOM——浏览器对象模型</li></ul><h3 id="书写位置" tabindex="-1">书写位置 <a class="header-anchor" href="#书写位置" aria-label="Permalink to &quot;书写位置&quot;">​</a></h3><ol><li><p>行内式</p><p>直接写在元素的内部</p><p>很少使用，比较少见，一般在特殊情况下使用</p></li><li><p>内嵌式</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>写在&lt;script&gt;&lt;/script&gt;内部</span></span></code></pre></div><p>最常用的写法</p></li><li><p>外部式</p><p>和css一样，写在一个js文件中，通过</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;文件名&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>引用，一般适用于代码量较大的情况下</p></li></ol><h2 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-label="Permalink to &quot;注释&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//  单行注释   ctrl+/</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/*</span></span>
<span class="line"><span>    多行注释   shift + alt + a</span></span>
<span class="line"><span>*/</span></span></code></pre></div><h2 id="输入和输出" tabindex="-1">输入和输出 <a class="header-anchor" href="#输入和输出" aria-label="Permalink to &quot;输入和输出&quot;">​</a></h2><h3 id="alert-msg" tabindex="-1">alert(msg) <a class="header-anchor" href="#alert-msg" aria-label="Permalink to &quot;alert(msg)&quot;">​</a></h3><p>控制浏览器弹出一个警告框</p><h3 id="console-log-msg" tabindex="-1">console.log(msg) <a class="header-anchor" href="#console-log-msg" aria-label="Permalink to &quot;console.log(msg)&quot;">​</a></h3><p>向控制台输出一个内容</p><h3 id="prompt-info" tabindex="-1">prompt(info) <a class="header-anchor" href="#prompt-info" aria-label="Permalink to &quot;prompt(info)&quot;">​</a></h3><p>浏览器弹出输入框，用户可以输入</p><p>获得的数据是字符串类型</p><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><p>存放数据的容器 内存里的一块空间，用于存放数据</p><h3 id="声明变量与赋值" tabindex="-1">声明变量与赋值 <a class="header-anchor" href="#声明变量与赋值" aria-label="Permalink to &quot;声明变量与赋值&quot;">​</a></h3><p>基本上都是 <strong>var</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//声明了age变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//age变量赋值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">or</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">； </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//声明并赋值（变量的初始化）</span></span></code></pre></div><h3 id="使用变量为存储用户输入的信息" tabindex="-1">使用变量为存储用户输入的信息 <a class="header-anchor" href="#使用变量为存储用户输入的信息" aria-label="Permalink to &quot;使用变量为存储用户输入的信息&quot;">​</a></h3><p>先获得输入框内用户输入的信息</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请输入您的名字：&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>输出用户输入的信息</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;，你好！&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><strong>注意</strong></p><ol><li>更新变量后原有值会给覆盖</li><li>可同时声明多个变量，多个变量名之间使用英文逗号隔开</li><li>声明不赋值，输出<strong>undefined</strong> 即未定义</li><li>不声明不赋值，使用报错</li><li>赋值不声明，可以使用，但不提倡</li></ol><h3 id="命名规范" tabindex="-1">命名规范 <a class="header-anchor" href="#命名规范" aria-label="Permalink to &quot;命名规范&quot;">​</a></h3><ul><li>由字母、数字、下划线、美元符号组成</li><li>严格区分大小写，var app 和 var APP 是两个不同的变量</li><li>不能以数字开头，18age是错误的</li><li>不能以关键字、保留字，比如：var、for、while</li><li>变量名必须有意义，</li><li>遵守驼峰命名发，首字母小写，后面单词的首字母需要大写，myFirstName</li></ul><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><p>不同数据占用内存的空间是不同的，把数据分为存储空间不同的数据，以充分利用存储空间，这便是不同的数据类型</p><p><strong>JS 的变量数据类型是只有在程序运行过程中，根据等号右边的值来确定的</strong></p><p><strong>JS 是动态语言，这意味着不用提前声明变量的类型，也就是相同的变量可用作不同的类型</strong></p><p>简单数据类型（基本数据类型）：Number、Boolean、String、Undefined、Null</p><h3 id="number" tabindex="-1">Number <a class="header-anchor" href="#number" aria-label="Permalink to &quot;Number&quot;">​</a></h3><h4 id="数字型进制" tabindex="-1">数字型进制 <a class="header-anchor" href="#数字型进制" aria-label="Permalink to &quot;数字型进制&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出时默认转换为十进制</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 010</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //数字8，数字前面加0，表示八进制</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0xa</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //数字10，数字前面加0x，表示十六进制（0~f）</span></span></code></pre></div><h4 id="数字型范围-最大值-最小值" tabindex="-1">数字型范围（最大值&amp;最小值） <a class="header-anchor" href="#数字型范围-最大值-最小值" aria-label="Permalink to &quot;数字型范围（最大值&amp;最小值）&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Number.MAX_VALUE);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出最大值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Number.MIN_VALUE);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出最小值</span></span></code></pre></div><h4 id="特殊值" tabindex="-1">特殊值 <a class="header-anchor" href="#特殊值" aria-label="Permalink to &quot;特殊值&quot;">​</a></h4><p>无穷大：Infinity；超过最大值范围 无穷大：-Infinity；超过最小值范围 NaN：非数值</p><h5 id="isnan-方法" tabindex="-1">isNaN()方法 <a class="header-anchor" href="#isnan-方法" aria-label="Permalink to &quot;isNaN()方法&quot;">​</a></h5><p>用来判断非数字，是数字返回false，不是数字返回true</p><h3 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h3><p>字符串类型，在js里，字符串都带双引号或者单引号， 默认值为&quot;&quot;</p><h4 id="引号嵌套" tabindex="-1">引号嵌套 <a class="header-anchor" href="#引号嵌套" aria-label="Permalink to &quot;引号嵌套&quot;">​</a></h4><p>可以用双引号在外，单引号在内进行镶嵌（反过来也可以）</p><h4 id="转义字符" tabindex="-1">转义字符 <a class="header-anchor" href="#转义字符" aria-label="Permalink to &quot;转义字符&quot;">​</a></h4><p>以 \\ 开头，且写在引号里面</p><ul><li>换行： \\n</li><li>斜杠： \\\\</li><li>单引号： \\&#39;</li><li>双引号： \\&quot;</li><li>缩进： \\t</li><li>空格： \\b</li></ul><h4 id="长度" tabindex="-1">长度 <a class="header-anchor" href="#长度" aria-label="Permalink to &quot;长度&quot;">​</a></h4><p>检测获取字符串长度用length</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//a的数值为str字符串长度</span></span></code></pre></div><h4 id="拼接" tabindex="-1">拼接 <a class="header-anchor" href="#拼接" aria-label="Permalink to &quot;拼接&quot;">​</a></h4><p>字符串 ＋ 其他类型 = 新的字符串</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;早上好&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 233</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 233</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);               </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//这样输出的数字之和</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;12&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);               </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//这样输入的是1212，因为第一个是字符串，第二个是数字类型</span></span></code></pre></div><h3 id="boolean" tabindex="-1">Boolean <a class="header-anchor" href="#boolean" aria-label="Permalink to &quot;Boolean&quot;">​</a></h3><p>仅有两个值，true和false</p><p>布尔型数字型相加的时候，true的值为1.false的值为0</p><h3 id="undefined" tabindex="-1"><strong>Undefined</strong> <a class="header-anchor" href="#undefined" aria-label="Permalink to &quot;**Undefined**&quot;">​</a></h3><p>未定义值</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出字符串 undefineda</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出NaN ，非数字</span></span></code></pre></div><h3 id="null" tabindex="-1"><strong>Null</strong> <a class="header-anchor" href="#null" aria-label="Permalink to &quot;**Null**&quot;">​</a></h3><p>空值 (学习对象时会深入)</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出字符串 nulla</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出1</span></span></code></pre></div><h3 id="typeof检测" tabindex="-1">typeof检测 <a class="header-anchor" href="#typeof检测" aria-label="Permalink to &quot;typeof检测&quot;">​</a></h3><p>typeof 可以检测获取变量的数据类型</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出变量类型</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出的不是null，而是object。</span></span></code></pre></div><blockquote><p>控制台颜色也可以看出变量类型，数字：蓝色，字符串：黑色，布尔：淡蓝色，undefined和null为灰色</p></blockquote><h3 id="数据类型的转换" tabindex="-1">数据类型的转换 <a class="header-anchor" href="#数据类型的转换" aria-label="Permalink to &quot;数据类型的转换&quot;">​</a></h3><h4 id="转字符串" tabindex="-1">转字符串 <a class="header-anchor" href="#转字符串" aria-label="Permalink to &quot;转字符串&quot;">​</a></h4><ol><li>toString（）</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//数字转字符串</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><ol><li>String（） //强制转换</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//数字转字符串</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num));</span></span></code></pre></div><ol><li>加号拼接字符串 //隐式转换</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//数字转字符串</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h4 id="转数字" tabindex="-1">转数字 <a class="header-anchor" href="#转数字" aria-label="Permalink to &quot;转数字&quot;">​</a></h4><p>1、parseInt（） 转整数 转整数,不会进1，会去掉后面字母，若前面有字母则输出NaN</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;10&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a));</span></span></code></pre></div><p>2、parseFloat（） 转浮点,会去掉后面字母，若前面有字母则输出NaN</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1.9&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a));</span></span></code></pre></div><p>3、Number（） 转数值</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;10&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a));</span></span></code></pre></div><p>4、隐式转换 （- / *）</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;10&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h4 id="转布尔" tabindex="-1">转布尔 <a class="header-anchor" href="#转布尔" aria-label="Permalink to &quot;转布尔&quot;">​</a></h4><p>Boolean（）</p><p>表示空、否定的值会被转换为false</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NaN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//其余的均输出true</span></span></code></pre></div><h2 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h2><p>也被成为操作符，是用于实现赋值、比较和执行算数运算等功能的符号</p><h3 id="算数运算符" tabindex="-1">算数运算符 <a class="header-anchor" href="#算数运算符" aria-label="Permalink to &quot;算数运算符&quot;">​</a></h3><p>就是加减乘除以及取余</p><h3 id="递增和递减运算符" tabindex="-1">递增和递减运算符 <a class="header-anchor" href="#递增和递减运算符" aria-label="Permalink to &quot;递增和递减运算符&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num;</span></span></code></pre></div><h3 id="比较运算符" tabindex="-1">比较运算符 <a class="header-anchor" href="#比较运算符" aria-label="Permalink to &quot;比较运算符&quot;">​</a></h3><p><img src="`+l+'" alt="image-20221104141136128" loading="lazy"></p><h3 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-label="Permalink to &quot;逻辑运算符&quot;">​</a></h3><p><img src="'+t+'" alt="image-20221104141250367" loading="lazy"></p><h3 id="赋值运算符" tabindex="-1">赋值运算符 <a class="header-anchor" href="#赋值运算符" aria-label="Permalink to &quot;赋值运算符&quot;">​</a></h3><p><img src="'+h+'" alt="image-20221104141319429" loading="lazy"></p><h3 id="运算符优先级" tabindex="-1">运算符优先级 <a class="header-anchor" href="#运算符优先级" aria-label="Permalink to &quot;运算符优先级&quot;">​</a></h3><p><img src="'+e+`" alt="image-20221104141402441" loading="lazy"></p><h2 id="流程控制" tabindex="-1">流程控制 <a class="header-anchor" href="#流程控制" aria-label="Permalink to &quot;流程控制&quot;">​</a></h2><h3 id="if语句" tabindex="-1">if语句 <a class="header-anchor" href="#if语句" aria-label="Permalink to &quot;if语句&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(条件表达式) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    执行语句</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    执行语句</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="三元表达式" tabindex="-1">三元表达式 <a class="header-anchor" href="#三元表达式" aria-label="Permalink to &quot;三元表达式&quot;">​</a></h3><p>如果表达式结果为真则返回表达式1的值， 如果为假，则返回表达式2的值</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">条件表达式 ？ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">表达式1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : 表达式2</span></span></code></pre></div><h3 id="switch语句" tabindex="-1">switch语句 <a class="header-anchor" href="#switch语句" aria-label="Permalink to &quot;switch语句&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(表达式) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value1:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       执行语句1;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value1:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       执行语句1;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       执行最后的语句;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="循环导读" tabindex="-1">循环导读 <a class="header-anchor" href="#循环导读" aria-label="Permalink to &quot;循环导读&quot;">​</a></h2><h3 id="for循环-双重for循环" tabindex="-1">for循环 双重for循环 <a class="header-anchor" href="#for循环-双重for循环" aria-label="Permalink to &quot;for循环  双重for循环&quot;">​</a></h3><p>其实循环和java的一样</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(初始化变量; 条件表达式; 操作表达式){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  循环体;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="while循环-do-while循环" tabindex="-1">while循环 do while循环 <a class="header-anchor" href="#while循环-do-while循环" aria-label="Permalink to &quot;while循环  do while循环&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(条件表达式) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   循环体;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="continue-break" tabindex="-1">continue break <a class="header-anchor" href="#continue-break" aria-label="Permalink to &quot;continue break&quot;">​</a></h3><p>continue是退出本次循环，继续下一次循环，</p><p>而break则是退出循环</p><h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h2><h3 id="创建方式" tabindex="-1">创建方式 <a class="header-anchor" href="#创建方式" aria-label="Permalink to &quot;创建方式&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [];</span></span></code></pre></div><h4 id="数组的索引" tabindex="-1">数组的索引 <a class="header-anchor" href="#数组的索引" aria-label="Permalink to &quot;数组的索引&quot;">​</a></h4><p>数组可以通过索引来访、设置、修改对应的数组元素，我们可以通过**数组名[索引]**的形式来获取数组中的元素。</p><p><strong>数组的长度：数组名.length</strong></p><h3 id="数组新增元素" tabindex="-1">数组新增元素 <a class="header-anchor" href="#数组新增元素" aria-label="Permalink to &quot;数组新增元素&quot;">​</a></h3><ol><li><p>修改length长度</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>数组名.length = 长度;</span></span></code></pre></div></li><li><p>修改索引号，追加数组元素</p><p>如果数组索引原有，追加的就会变成替换其中的元素</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 元素;</span></span></code></pre></div></li></ol><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><p>函数就是封装了一段可被重复调用执行的代码块，通过代码块可以实现大量代码的重复使用</p><h4 id="函数使用" tabindex="-1">函数使用 <a class="header-anchor" href="#函数使用" aria-label="Permalink to &quot;函数使用&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 函数名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">形参</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//声明函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   函数体;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 变量名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//匿名函数	函数没有名字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   函数体; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">函数名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(实参);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//调用函数</span></span></code></pre></div><p>形参是接收方，实参是传递方</p><p>函数表达式声明方式跟声明变量差不多，只不过变量里面存的是值，而函数表达式里面存的是函数</p><p>函数名一般是动词</p><h4 id="return语句" tabindex="-1">return语句 <a class="header-anchor" href="#return语句" aria-label="Permalink to &quot;return语句&quot;">​</a></h4><p>函数需要有返回值，最终的结果需要返回给函数的调用者</p><p>函数名（）通过return 实现</p><h3 id="arguments的使用" tabindex="-1">arguments的使用 <a class="header-anchor" href="#arguments的使用" aria-label="Permalink to &quot;arguments的使用&quot;">​</a></h3><p>当我们不确定有多少个参数传递的时候，可以用arguments来获取。在JavaScript在，arguments实际上它是当前函数的一个内置对象，索引函数都内置了一个arguments对象，arguments对象中存储了传递的<strong>所有实参</strong>。</p><p><strong>arguments展示形式是一个伪数组</strong>，因此可以进行遍历。伪数组具有如下特点：</p><p>具有length属性</p><p>按索引方式储存数据</p><p>不具有数组的push、pop等方法</p><h2 id="作用域" tabindex="-1">作用域 <a class="header-anchor" href="#作用域" aria-label="Permalink to &quot;作用域&quot;">​</a></h2><p>作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突。</p><h4 id="全局变量" tabindex="-1">全局变量 <a class="header-anchor" href="#全局变量" aria-label="Permalink to &quot;全局变量&quot;">​</a></h4><p>在全局作用域下的变量，在全局下都可以使用</p><p>整个script标签，或者单独一个js文件</p><h4 id="局部变量" tabindex="-1">局部变量 <a class="header-anchor" href="#局部变量" aria-label="Permalink to &quot;局部变量&quot;">​</a></h4><p>在局部作用域下的变量，只能在函数内部使用，或者在一个局部域中</p><h2 id="预解析" tabindex="-1">预解析 <a class="header-anchor" href="#预解析" aria-label="Permalink to &quot;预解析&quot;">​</a></h2><p>js引擎运行js分两步： 预解析 代码执行</p><ul><li>预解析：js引擎会把js里面所有的var和function提升到当前作用域的最前面</li><li>代码执行：按顺序，从上到下</li></ul><h4 id="预解析-1" tabindex="-1">预解析 <a class="header-anchor" href="#预解析-1" aria-label="Permalink to &quot;预解析&quot;">​</a></h4><ol><li>变量预解析（变量提升）：把所有的变量声明提升到当前作用域的最前面，但不提升赋值操作</li><li>函数预解析（函数提升）：把所有的函数声明提升到当前作用域的最前面</li></ol><h2 id="对象" tabindex="-1">对象 <a class="header-anchor" href="#对象" aria-label="Permalink to &quot;对象&quot;">​</a></h2><h3 id="创建对象" tabindex="-1">创建对象 <a class="header-anchor" href="#创建对象" aria-label="Permalink to &quot;创建对象&quot;">​</a></h3><ol><li><p>利用字面量创建对象</p><p>对象字面量：就是花括号{ }里面包含了表达这个具体事物（对象）的属性和方法。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    uname: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sex:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;男&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sayHi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        表达式;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>多个属性或者方法中间使用逗号分开</p><p>方法冒号后面跟的是一个匿名函数</p><p><strong>使用对象：</strong></p><ol><li>对象名.属性名</li><li>对象名[&#39;属性名&#39;]</li><li>对象名.方法名()</li></ol></li><li><p>利用new Object创建对象</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.uname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li><li><p>利用构造函数创建对象</p><p>是一种特殊的函数，主要用来初始化对象，即为对象成员变量赋初始值，它总与new运算符一起使用，我们可以把对象中的一些公共属性和方法抽取出来，然后封装到这个函数中。</p></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 构造函数名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.属性 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 值;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">方法</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 沟站函数名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//调用时需要加new</span></span></code></pre></div><ul><li>构造函数名字首字母需要大写</li><li>不需要return就可以返回结果</li><li>调用构造函数时需要加new</li></ul><h3 id="遍历对象" tabindex="-1">遍历对象 <a class="header-anchor" href="#遍历对象" aria-label="Permalink to &quot;遍历对象&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>for(var k in obj){</span></span>
<span class="line"><span>console.log(k);//k 遍历 输出 得到的是属性名</span></span>
<span class="line"><span>console.log(obj[k]);//obj[k] 得到的是属性值</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="new关键字" tabindex="-1">new关键字 <a class="header-anchor" href="#new关键字" aria-label="Permalink to &quot;new关键字&quot;">​</a></h3><p>执行过程</p><ol><li>在内存中创建一个新的空对象</li><li>让this指向这个新的对象</li><li>执行构造函数里面的代码，给这个新对象添加属性和方法</li><li>返回这新对象（所以构造函里面不需要添加return）</li></ol><h2 id="内置对象" tabindex="-1">内置对象 <a class="header-anchor" href="#内置对象" aria-label="Permalink to &quot;内置对象&quot;">​</a></h2><p>就是js语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或是最基本而必要的功能（属性和方法）</p><h3 id="math对象" tabindex="-1">Math对象 <a class="header-anchor" href="#math对象" aria-label="Permalink to &quot;Math对象&quot;">​</a></h3><p>Math对象不是一个构造函数，所以我们不需要new来调用，而是直接使用里面的属性和方法即可</p><h3 id="date对象" tabindex="-1">Date对象 <a class="header-anchor" href="#date对象" aria-label="Permalink to &quot;Date对象&quot;">​</a></h3><p>Date() 日期对象是一个构造函数，必须使用new来调用</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//没有参数，放回当前系统的当前时间</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2020-10-1 5:5:5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//返回参数里面的时间</span></span></code></pre></div><blockquote><p>月份注意：从0开始，也就是输入1月，但输出为2月，所以需要减1</p></blockquote><h4 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h4><ul><li><p>getFullYear() -- 返回当前日期的年</p></li><li><p>getMonth() -- 返回月份小1个月，也就是如果是7月则返回6月，所以需要+1</p></li><li><p>getDate() -- 返回的是几号</p></li><li><p>getDay() -- 返回的是星期，周一返回1，周六返回6，周日返回0</p></li><li><p>getHours() -- 获取当前小时</p></li><li><p>getMinutes() -- 获取当前分钟</p></li><li><p>getSeconds() -- 获取当前秒钟</p></li></ul><blockquote><p>时间戳</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>倒计时：</span></span>
<span class="line"><span>var nowTime = +new Date();	//返回的是当前时间总的毫秒数</span></span>
<span class="line"><span>var inputTime = +new Date(time);	//返回的是输入时间总的毫秒数</span></span>
<span class="line"><span>var times = (inputTime - nowTime) / 1000;	//剩余时间总的秒数</span></span>
<span class="line"><span>var d = parseInt(times / 60 / 60 / 24);	//天</span></span>
<span class="line"><span>var h = parseInt(times / 60 / 60 % 24);	//时</span></span>
<span class="line"><span>var m = parseInt(times / 60 % 60);	//分</span></span>
<span class="line"><span>var d = parseInt(times % 60);	//秒</span></span></code></pre></div></blockquote><h3 id="数组对象" tabindex="-1">数组对象 <a class="header-anchor" href="#数组对象" aria-label="Permalink to &quot;数组对象&quot;">​</a></h3><h5 id="检测是否为数组" tabindex="-1">检测是否为数组 <a class="header-anchor" href="#检测是否为数组" aria-label="Permalink to &quot;检测是否为数组&quot;">​</a></h5><ul><li>instanceof 运算符 它可以用来检测是否为数组</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li>Array.isArray() 函数</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr));</span></span></code></pre></div><h5 id="添加删除数组元素" tabindex="-1">添加删除数组元素 <a class="header-anchor" href="#添加删除数组元素" aria-label="Permalink to &quot;添加删除数组元素&quot;">​</a></h5><ul><li>push()——在数组的末尾添加一个或者多个元素，在push的()中直接写需要添加的数组元素</li><li>unshift()——在数组的开头添加一个或者多个数组元素</li><li>pop()——删除数组的最后一个元素，但只能删除一个，同时，返回的是被删除的元素</li><li>shift()——删除数组的第一个元素，但只能删除一个，同时，返回的是被删除的元素</li></ul><h5 id="数组排序" tabindex="-1">数组排序 <a class="header-anchor" href="#数组排序" aria-label="Permalink to &quot;数组排序&quot;">​</a></h5><ul><li>reverse() 翻转数组</li><li>sort() 冒泡排序，进行数组排序</li></ul><p>但存在缺陷。所以需要新增参数</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//按照升序的顺序排序</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//按照降序的顺序排序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h5 id="数组索引方法" tabindex="-1">数组索引方法 <a class="header-anchor" href="#数组索引方法" aria-label="Permalink to &quot;数组索引方法&quot;">​</a></h5><ul><li>indexOf() 数组中查找给定元素的第一个索引</li></ul><p>如果存在返回索引号，如果不存在，则返回-1</p><ul><li>lastindexOf() 在数组的最后一个的索引</li></ul><p>如果存在返回索引号，如果不存在，则返回-1</p><h5 id="数组转换为字符串" tabindex="-1">数组转换为字符串 <a class="header-anchor" href="#数组转换为字符串" aria-label="Permalink to &quot;数组转换为字符串&quot;">​</a></h5><ul><li>tostring() 将数组转换为字符串，都好分隔每一项</li><li>join(f分隔符)，把数组所有元素转换成一个字符串（添加分隔符）</li></ul><h3 id="字符串对象" tabindex="-1">字符串对象 <a class="header-anchor" href="#字符串对象" aria-label="Permalink to &quot;字符串对象&quot;">​</a></h3><h4 id="包装类型" tabindex="-1">包装类型 <a class="header-anchor" href="#包装类型" aria-label="Permalink to &quot;包装类型&quot;">​</a></h4><p>基本包装类型，就是简单数据类型包装成为了复杂数据类型</p><h4 id="根据字符返回位置" tabindex="-1">根据字符返回位置 <a class="header-anchor" href="#根据字符返回位置" aria-label="Permalink to &quot;根据字符返回位置&quot;">​</a></h4><ul><li><p>indexOf() 返回指定内容在元字符串中的位置，如果找不到就返回-1</p><p>开始的位置是index索引号</p></li><li><p>lastindexOf() 从后往前找，只找第一个匹配的</p></li></ul><h4 id="根据位置返回字符" tabindex="-1">根据位置返回字符 <a class="header-anchor" href="#根据位置返回字符" aria-label="Permalink to &quot;根据位置返回字符&quot;">​</a></h4><ul><li>charAt(index) 返回指定位置的字符(index字符串的索引号)</li><li>charCodeAt(index) 获取指定位置处字符的ASCI码(index索引号)</li><li>str[index] 获取指定位置处字符</li></ul><h4 id="字符串操作方法" tabindex="-1">字符串操作方法 <a class="header-anchor" href="#字符串操作方法" aria-label="Permalink to &quot;字符串操作方法&quot;">​</a></h4><ul><li>concat(str1, str2, str3, ...) 用于连接两个或多个字符串，拼接字符串，等效于+，+更常用</li><li>substr(start, length) 从start位置开始(索引号)，length 取的个数</li><li>slice(start, end) 从start位置开始，截取到end位置，但end取不到</li><li>substring(start, end) 从start位置开始，截取到end位置，但end取不到，基本个slice一样，但不接受负值</li></ul><h4 id="替换字符replace" tabindex="-1">替换字符replace <a class="header-anchor" href="#替换字符replace" aria-label="Permalink to &quot;替换字符replace&quot;">​</a></h4><ul><li>replace(str1,str2) 将第一个字符替换成第二个字符</li></ul><h4 id="字符转换为数组split" tabindex="-1">字符转换为数组split <a class="header-anchor" href="#字符转换为数组split" aria-label="Permalink to &quot;字符转换为数组split&quot;">​</a></h4><ul><li>split(分隔符) 将字符分割成数组，根据字符中原有的分隔符进行分割</li></ul><h2 id="简单类型与复杂类型" tabindex="-1">简单类型与复杂类型 <a class="header-anchor" href="#简单类型与复杂类型" aria-label="Permalink to &quot;简单类型与复杂类型&quot;">​</a></h2><h3 id="简单类型与复杂类型-1" tabindex="-1">简单类型与复杂类型 <a class="header-anchor" href="#简单类型与复杂类型-1" aria-label="Permalink to &quot;简单类型与复杂类型&quot;">​</a></h3><blockquote><p>简单类型又叫做基本数据类型或者值类型，复杂类型又叫做引用类型</p></blockquote><p>值类型：简单数据类型/基本数据类型，在存储时变量中存储的是值本身</p><p>string、number、boolean、undefined、null</p><p>引用类型：复杂数据类型，在存储时变量中存储的仅仅是地址</p><p>通过new关键字创建的对象（系统、自定义对象）</p><p>Object、Array、Date</p><h3 id="堆和栈" tabindex="-1">堆和栈 <a class="header-anchor" href="#堆和栈" aria-label="Permalink to &quot;堆和栈&quot;">​</a></h3><p><img src="`+p+'" alt="image-20221104160909318" loading="lazy"></p><h3 id="内存分配" tabindex="-1">内存分配 <a class="header-anchor" href="#内存分配" aria-label="Permalink to &quot;内存分配&quot;">​</a></h3><p>简单类型：存放到栈里面，里面直接开辟一个空间存放的值</p><p>复杂类型：首先在栈里面存放地址，十六进制表示，然后这个地址指向堆里面的数据</p><h3 id="传参" tabindex="-1">传参 <a class="header-anchor" href="#传参" aria-label="Permalink to &quot;传参&quot;">​</a></h3><p>简单类型：函数的形参可以看作是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里面的值<strong>复制</strong>一份给形参，那么在方法内部对形参做任何修改，都不会影响到外部变量。</p><p>复杂类型：函数的形参可以看作是一个变量，当我们把一个值类型变量作为参数传给函数的形参时，其实是把变量在栈空间里面的堆地址<strong>复制</strong>一份给形参，形参和实参其实保存的是同一个堆地址，所以操作的是同一个对象。</p>',226),d=[r];function o(E,c,g,y,u,b){return i(),a("div",null,d)}const m=s(k,[["render",o]]);export{v as __pageData,m as default};
