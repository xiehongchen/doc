import{_ as o,c as t,o as i,a5 as a,bG as e,bH as s,bI as p,bJ as _}from"./chunks/framework.DDBsw1uY.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"前端/vue/vue3/4、Composition API 的优势.md","filePath":"前端/vue/vue3/4、Composition API 的优势.md","lastUpdated":1718965805000}'),n={name:"前端/vue/vue3/4、Composition API 的优势.md"},r=a('<h2 id="_4、composition-api-的优势" tabindex="-1">4、Composition API 的优势 <a class="header-anchor" href="#_4、composition-api-的优势" aria-label="Permalink to &quot;4、Composition API 的优势&quot;">​</a></h2><h3 id="_1-options-api-存在的问题" tabindex="-1">1.Options API 存在的问题 <a class="header-anchor" href="#_1-options-api-存在的问题" aria-label="Permalink to &quot;1.Options API 存在的问题&quot;">​</a></h3><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p><img src="'+e+'" style="width:100%;"><img src="'+s+'" style="width:100%;margin-top:20px;"><h3 id="_2-composition-api-的优势" tabindex="-1">2.Composition API 的优势 <a class="header-anchor" href="#_2-composition-api-的优势" aria-label="Permalink to &quot;2.Composition API 的优势&quot;">​</a></h3><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><img src="'+p+'" style="width:100%;"><img src="'+_+'" style="width:100%;margin-top:20px;">',9),m=[r];function c(d,h,l,u,P,A){return i(),t("div",null,m)}const b=o(n,[["render",c]]);export{f as __pageData,b as default};
